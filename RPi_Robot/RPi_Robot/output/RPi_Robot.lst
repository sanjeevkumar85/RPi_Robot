FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 07 90 LJMP  _BackLeftMotor_P_ISR(0149)     ljmp	_BackLeftMotor_P_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 07 D7 LJMP  _BackLeftMotor_N_ISR(0153)     ljmp	_BackLeftMotor_N_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 07 02 LJMP  _BackRightMotor_P_ISR(0165)     ljmp	_BackRightMotor_P_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 07 49 LJMP  _BackRightMotor_N_ISR(0169)     ljmp	_BackRightMotor_N_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
0040: 7D 04 9C LJMP  _Range_ADC_ADConversion_ISR(0181)     ljmp	_Range_ADC_ADConversion_ISR
0043: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
0048: 7D 03 FF LJMP  _Servo_PWM_ISR     (0189)     ljmp	_Servo_PWM_ISR
004B: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 05 AB LJMP  _I2Cs_ISR          (0213)     ljmp	_I2Cs_ISR
0063: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
0087: 5D D0    MOV   A,REG[0xD0]        
0089: 08       PUSH  A                  
008A: 62 D0 00 MOV   REG[0xD0],0x0      
008D: 55 FA 01 MOV   [Robot_Paras+223],0x1
0090: 4F       MOV   X,SP               
0091: 5B       MOV   A,X                
0092: 01 03    ADD   A,0x3              
0094: 53 F9    MOV   [Robot_Paras+222],A
0096: 55 F8 3A MOV   [Robot_Paras+221],0x3A
0099: 50 06    MOV   A,0x6              
009B: 00       SWI                      
009C: 71 10    OR    F,0x10             
009E: 51 F9    MOV   A,[Robot_Paras+222]
00A0: 60 E8    MOV   REG[0xE8],A        
00A2: 51 F8    MOV   A,[Robot_Paras+221]
00A4: 60 EA    MOV   REG[0xEA],A        
00A6: 70 EF    AND   F,0xEF             
00A8: 18       POP   A                  
00A9: 60 D0    MOV   REG[0xD0],A        
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
00AB: 55 F8 00 MOV   [Robot_Paras+221],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
00AE: 55 F9 00 MOV   [Robot_Paras+222],0x0(0308)     mov  [bSSC_KEYSP], 0
00B1: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
00B3: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00B6: 70 EF    AND   F,0xEF             
00B8: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
00BB: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
00BE: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
00C1: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00C4: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00C7: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00CA: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00CC: 4E       SWAP  SP,A               (0410)     swap  A, SP
00CD: 62 D3 07 MOV   REG[0xD3],0x7      
00D0: 62 D0 00 MOV   REG[0xD0],0x0      
00D3: 62 D5 00 MOV   REG[0xD5],0x0      
00D6: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00D9: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00DB: 7C 03 9D LCALL 0x039D             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00DE: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00E1: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00E3: 57 96    MOV   X,0x96             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00E5: 08       PUSH  A                  (0486)     push  A
00E6: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00E7: 53 16    MOV   [__r0],A           (0488)     mov   [__r0], A
00E9: 18       POP   A                  (0489)     pop   A
00EA: 75       INC   X                  (0490)     inc   X
00EB: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00ED: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00EE: 4B       SWAP  A,X                (0493)     swap  A, X
00EF: 51 16    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00F1: 80 04    JMP   0x00F6             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00F3: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00F4: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00F6: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00F9: 08       PUSH  A                  (0521)     push  A
00FA: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00FB: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00FD: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00FE: A0 4B    JZ    0x014A             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
0100: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
0101: 75       INC   X                  (0527)     inc   X                            ; pXIData++
0102: 09 00    ADC   A,0x0              (0528)     adc   A, 0
0104: 08       PUSH  A                  (0529)     push  A
0105: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
0106: 53 16    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
0108: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
0109: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
010A: 09 00    ADC   A,0x0              (0534)     adc   A, 0
010C: 08       PUSH  A                  (0535)     push  A
010D: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
010E: A0 1C    JZ    0x012B             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
0110: 53 15    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
0112: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
0113: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0114: 09 00    ADC   A,0x0              (0548)     adc   A, 0
0116: 08       PUSH  A                  (0549)     push  A
0117: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
0118: 3F 16    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
011A: 47 16 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
011D: B0 06    JNZ   0x0124             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
011F: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0121: 74       INC   A                  (0555)     inc   A
0122: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0124: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0125: 7A 15    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0127: BF EB    JNZ   0x0113             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0129: 8F C9    JMP   0x00F3             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
012B: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
012C: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
012D: 09 00    ADC   A,0x0              (0566)     adc   A, 0
012F: 08       PUSH  A                  (0567)     push  A
0130: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
0131: 53 15    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
0133: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0135: 3F 16    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0137: 47 16 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
013A: B0 08    JNZ   0x0143             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
013C: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
013E: 74       INC   A                  (0580)     inc   A
013F: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
0141: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
0143: 7A 15    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0145: BF EF    JNZ   0x0135             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0147: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0148: 8F AA    JMP   0x00F3             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
014A: 18       POP   A                  (0590)     pop   A                            ; balance stack
014B: 71 10    OR    F,0x10             
014D: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
014F: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0152: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0154: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0157: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
015A: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
015C: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
015F: 7C 08 6A LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0162: 8F FF    JMP   0x0162             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0164: 50 08    MOV   A,0x8              (0689)     mov   A, POWER_SETTING
0166: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
0167: 30       HALT                     
0168: 30       HALT                     
0169: 30       HALT                     
016A: 30       HALT                     
016B: 30       HALT                     
016C: 30       HALT                     
016D: 30       HALT                     
016E: 30       HALT                     
016F: 30       HALT                     
0170: 30       HALT                     
0171: 30       HALT                     
0172: 30       HALT                     
0173: 30       HALT                     
0174: 30       HALT                     
0175: 30       HALT                     
0176: 30       HALT                     
0177: 30       HALT                     
0178: 30       HALT                     
0179: 30       HALT                     
017A: 30       HALT                     
017B: 30       HALT                     
017C: 30       HALT                     
017D: 30       HALT                     
017E: 30       HALT                     
017F: 30       HALT                     
0180: 30       HALT                     
0181: 30       HALT                     
0182: 30       HALT                     
0183: 30       HALT                     
0184: 30       HALT                     
0185: 30       HALT                     
0186: 30       HALT                     
0187: 30       HALT                     
0188: 30       HALT                     
0189: 30       HALT                     
018A: 30       HALT                     
018B: 30       HALT                     
018C: 30       HALT                     
018D: 30       HALT                     
018E: 30       HALT                     
018F: 30       HALT                     
0190: 30       HALT                     
0191: 30       HALT                     
0192: 30       HALT                     
0193: 30       HALT                     
0194: 30       HALT                     
0195: 30       HALT                     
0196: 30       HALT                     
0197: 30       HALT                     
0198: 30       HALT                     
0199: 30       HALT                     
019A: 30       HALT                     
019B: 30       HALT                     
019C: 30       HALT                     
019D: 30       HALT                     
019E: 30       HALT                     
019F: 30       HALT                     
01A0: 0E 22 0C ADC   [Robot_Paras+7],0xC
01A3: C7 0B    JC    0x08AF             
01A5: 33 09    XOR   A,[X+9]            
01A7: BC 08    JNZ   0xFDB0             
01A9: A2 07    JZ    0x03B1             
01AB: C3 07    JC    0x04B3             
01AD: 03 06    ADD   A,[X+6]            
01AF: 67       ASR   A                  
01B0: 05 E2    ADD   [X-30],A           
01B2: 05 72    ADD   [X+114],A          
01B4: 05 07    ADD   [X+7],A            
01B6: 04 B4    ADD   [Robot_Paras+153],A
01B8: 04 64    ADD   [Robot_Paras+73],A 
01BA: 04 25    ADD   [Robot_Paras+10],A 
01BC: 03 EA    ADD   A,[X-22]           
01BE: 27 00 25 AND   [X+0],0x25         
01C1: 64       ASL   A                  
01C2: 26 32 23 AND   [Robot_Paras+23],0x23
01C5: 00       SWI                      
01C6: 21 64    AND   A,0x64             
01C8: 22 32    AND   A,[Robot_Paras+23] 
01CA: 37 00 35 XOR   [X+0],0x35         
01CD: 64       ASL   A                  
01CE: 36 32 33 XOR   [Robot_Paras+23],0x33
01D1: 00       SWI                      
01D2: 31 64    XOR   A,0x64             
01D4: 32 32    XOR   A,[Robot_Paras+23] 
01D6: 84 90    JMP   0x0667             
01D8: 85 00    JMP   0x06D9             
01DA: 86 60    JMP   __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes
01DC: 87 F8    JMP   0x09D5             
01DE: 43 00 41 OR    REG[0x0],0x41      
01E1: 00       SWI                      
01E2: 42 01 75 AND   REG[X+0x1],0x75    
01E5: FE 76    INDEX 0x005D             
01E7: 21 77    AND   A,0x77             
01E9: 20       POP   X                  
01EA: 74       INC   A                  
01EB: 00       SWI                      
01EC: 47 00 45 TST   [0x0],0x45         
01EF: 68 46    ASR   [Robot_Paras+43]   
01F1: 00       SWI                      
01F2: 4B       SWAP  A,X                
01F3: 00       SWI                      
01F4: 49 01 4A TST   REG[0x1],0x4A      
01F7: 00       SWI                      
01F8: 60 28    MOV   REG[0x28],A        
01FA: 66 00    ASL   [X+0]              
01FC: 63 15 65 MOV   REG[X+0x15],0x65   
01FF: 00       SWI                      
0200: E6 02    JACC  0x0803             
0202: E7 46    JACC  0x0949             
0204: D6 40    JNC   0x0845             
0206: B0 00    JNZ   0x0207             
0208: B1 00    JNZ   0x0309             
020A: B2 00    JNZ   0x040B             
020C: B3 33    JNZ   0x0540             
020E: B4 33    JNZ   0x0642             
0210: B5 11    JNZ   0x0722             
0212: B6 11    JNZ   0x0824             
0214: B8 55    JNZ   0xFA6A             
0216: B9 00    JNZ   0xFB17             
0218: BA 10    JNZ   0xFC29             
021A: BB 33    JNZ   0xFD4E             
021C: BC 33    JNZ   0xFE50             
021E: BD 22    JNZ   0xFF41             
0220: BE 22    JNZ   0x0043             
0222: C0 00    JC    0x0223             
0224: C1 00    JC    0x0325             
0226: C2 20    JC    0x0447             
0228: C3 33    JC    0x055C             
022A: C4 33    JC    0x065E             
022C: C5 00    JC    0x072D             
022E: C6 40    JC    0x086F             
0230: C8 55    JC    0xFA86             
0232: C9 00    JC    0xFB33             
0234: CA 30    JC    0xFC65             
0236: CB 33    JC    0xFD6A             
0238: CC 33    JC    0xFE6C             
023A: CD 00    JC    0xFF3B             
023C: CE 00    JC    0x003D             
023E: 6C 00    RLC   [X+0]              
0240: 6D       RRC   A                  
0241: 00       SWI                      
0242: 6E 00    RRC   [0x0]              
0244: 6F 00    RRC   [X+0]              
0246: FF 24    INDEX 0x016C             
0248: 21 25    AND   A,0x25             
024A: 16 26 47 SUB   [Robot_Paras+11],0x47
024D: 20       POP   X                  
024E: 21 21    AND   A,0x21             
0250: 16 22 45 SUB   [Robot_Paras+7],0x45
0253: 34 21    XOR   [Robot_Paras+6],A  
0255: 35 16    XOR   [X+22],A           
0257: 36 47 30 XOR   [Robot_Paras+44],0x30
025A: 21 31    AND   A,0x31             
025C: 16 32 45 SUB   [Robot_Paras+23],0x45
025F: 40       NOP                      
0260: 31 41    XOR   A,0x41             
0262: 16 42 40 SUB   [Robot_Paras+39],0x40
0265: 44 01 45 OR    REG[X+0x1],0x45    
0268: 11 46    SUB   A,0x46             
026A: 40       NOP                      
026B: 48 21 49 TST   [X+33],0x49        
026E: 31 4A    XOR   A,0x4A             
0270: 47 61 00 TST   [Robot_Paras+70],0x0
0273: 69 00    ASR   [X+0]              
0275: 60 05    MOV   REG[0x5],A         
0277: 62 00 67 MOV   REG[0x0],0x67      
027A: 33 68    XOR   A,[X+104]          
027C: 33 63    XOR   A,[X+99]           
027E: 00       SWI                      
027F: 66 00    ASL   [X+0]              
0281: D1 00    JNC   0x0382             
0283: D3 00    JNC   0x0584             
0285: D0 00    JNC   0x0286             
0287: D2 00    JNC   0x0488             
0289: E1 32    JACC  0x03BC             
028B: E2 00    JACC  0x048C             
028D: DF 6E    JNC   0x01FC             
028F: DE 02    JNC   0x0092             
0291: DD 00    JNC   0xFF92             
0293: E7 48    JACC  0x09DC             
0295: FF 0D    INDEX 0x01A4             
0297: A8 70    JZ    0xFB08             FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0298: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_rpi_robot_Bank1
                                        (0019) export LoadConfigTBL_rpi_robot_Bank0
                                        (0020) export LoadConfigTBL_rpi_robot_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_rpi_robot_Bank0:
                                        (0023) ;  Instance name AMUX4, User Module AMUX4
                                        (0024) ;  Instance name BackLeftMotor_N, User Module PWM8
                                        (0025) ;       Instance name BackLeftMotor_N, Block Name PWM8(DBB01)
                                        (0026) 	db		27h, 00h		;BackLeftMotor_N_CONTROL_REG(DBB01CR0)
                                        (0027) 	db		25h, 64h		;BackLeftMotor_N_PERIOD_REG(DBB01DR1)
                                        (0028) 	db		26h, 32h		;BackLeftMotor_N_COMPARE_REG(DBB01DR2)
                                        (0029) ;  Instance name BackLeftMotor_P, User Module PWM8
                                        (0030) ;       Instance name BackLeftMotor_P, Block Name PWM8(DBB00)
                                        (0031) 	db		23h, 00h		;BackLeftMotor_P_CONTROL_REG(DBB00CR0)
                                        (0032) 	db		21h, 64h		;BackLeftMotor_P_PERIOD_REG(DBB00DR1)
                                        (0033) 	db		22h, 32h		;BackLeftMotor_P_COMPARE_REG(DBB00DR2)
                                        (0034) ;  Instance name BackRightMotor_N, User Module PWM8
                                        (0035) ;       Instance name BackRightMotor_N, Block Name PWM8(DBB11)
                                        (0036) 	db		37h, 00h		;BackRightMotor_N_CONTROL_REG(DBB11CR0)
                                        (0037) 	db		35h, 64h		;BackRightMotor_N_PERIOD_REG(DBB11DR1)
                                        (0038) 	db		36h, 32h		;BackRightMotor_N_COMPARE_REG(DBB11DR2)
                                        (0039) ;  Instance name BackRightMotor_P, User Module PWM8
                                        (0040) ;       Instance name BackRightMotor_P, Block Name PWM8(DBB10)
                                        (0041) 	db		33h, 00h		;BackRightMotor_P_CONTROL_REG(DBB10CR0)
                                        (0042) 	db		31h, 64h		;BackRightMotor_P_PERIOD_REG(DBB10DR1)
                                        (0043) 	db		32h, 32h		;BackRightMotor_P_COMPARE_REG(DBB10DR2)
                                        (0044) ;  Instance name I2Cs, User Module EzI2Cs
                                        (0045) ;  Instance name Range_ADC, User Module ADCINC
                                        (0046) ;       Instance name Range_ADC, Block Name ADC(ASD11)
                                        (0047) 	db		84h, 90h		;Range_ADC_AtoDcr0(ASD11CR0)
                                        (0048) 	db		85h, 00h		;Range_ADC_AtoDcr1(ASD11CR1)
                                        (0049) 	db		86h, 60h		;Range_ADC_AtoDcr2(ASD11CR2)
                                        (0050) 	db		87h, f8h		;Range_ADC_AtoDcr3(ASD11CR3)
                                        (0051) ;       Instance name Range_ADC, Block Name PWM(DBB20)
                                        (0052) 	db		43h, 00h		;Range_ADC_PWMcr0(DBB20CR0)
                                        (0053) 	db		41h, 00h		;Range_ADC_PWMdr1(DBB20DR1)
                                        (0054) 	db		42h, 01h		;Range_ADC_PWMdr2(DBB20DR2)
                                        (0055) ;  Instance name Range_PGA, User Module PGA
                                        (0056) ;       Instance name Range_PGA, Block Name GAIN(ACB01)
                                        (0057) 	db		75h, feh		;Range_PGA_GAIN_CR0(ACB01CR0)
                                        (0058) 	db		76h, 21h		;Range_PGA_GAIN_CR1(ACB01CR1)
                                        (0059) 	db		77h, 20h		;Range_PGA_GAIN_CR2(ACB01CR2)
                                        (0060) 	db		74h, 00h		;Range_PGA_GAIN_CR3(ACB01CR3)
                                        (0061) ;  Instance name Servo_PWM, User Module PWM16
                                        (0062) ;       Instance name Servo_PWM, Block Name PWM16_LSB(DBB21)
                                        (0063) 	db		47h, 00h		;Servo_PWM_CONTROL_LSB_REG(DBB21CR0)
                                        (0064) 	db		45h, 68h		;Servo_PWM_PERIOD_LSB_REG(DBB21DR1)
                                        (0065) 	db		46h, 00h		;Servo_PWM_COMPARE_LSB_REG(DBB21DR2)
                                        (0066) ;       Instance name Servo_PWM, Block Name PWM16_MSB(DCB22)
                                        (0067) 	db		4bh, 00h		;Servo_PWM_CONTROL_MSB_REG(DCB22CR0)
                                        (0068) 	db		49h, 01h		;Servo_PWM_PERIOD_MSB_REG(DCB22DR1)
                                        (0069) 	db		4ah, 00h		;Servo_PWM_COMPARE_MSB_REG(DCB22DR2)
                                        (0070) ;  Global Register values Bank 0
                                        (0071) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0072) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0073) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0074) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0075) 	db		e6h, 02h		; DecimatorControl_0 register (DEC_CR0)
                                        (0076) 	db		e7h, 46h		; DecimatorControl_1 register (DEC_CR1)
                                        (0077) 	db		d6h, 40h		; I2CConfig register (I2C_CFG)
                                        (0078) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0079) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0080) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0081) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0082) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0083) 	db		b5h, 11h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0084) 	db		b6h, 11h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0085) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0086) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0087) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0088) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0089) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0090) 	db		bdh, 22h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0091) 	db		beh, 22h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0092) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0093) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0094) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0095) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0096) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0097) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0098) 	db		c6h, 40h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0099) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0100) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0101) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0102) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0103) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0104) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0105) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0106) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0107) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0108) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0109) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0110) 	db		ffh
                                        (0111) LoadConfigTBL_rpi_robot_Bank1:
                                        (0112) ;  Instance name AMUX4, User Module AMUX4
                                        (0113) ;  Instance name BackLeftMotor_N, User Module PWM8
                                        (0114) ;       Instance name BackLeftMotor_N, Block Name PWM8(DBB01)
                                        (0115) 	db		24h, 21h		;BackLeftMotor_N_FUNC_REG(DBB01FN)
                                        (0116) 	db		25h, 16h		;BackLeftMotor_N_INPUT_REG(DBB01IN)
                                        (0117) 	db		26h, 47h		;BackLeftMotor_N_OUTPUT_REG(DBB01OU)
                                        (0118) ;  Instance name BackLeftMotor_P, User Module PWM8
                                        (0119) ;       Instance name BackLeftMotor_P, Block Name PWM8(DBB00)
                                        (0120) 	db		20h, 21h		;BackLeftMotor_P_FUNC_REG(DBB00FN)
                                        (0121) 	db		21h, 16h		;BackLeftMotor_P_INPUT_REG(DBB00IN)
                                        (0122) 	db		22h, 45h		;BackLeftMotor_P_OUTPUT_REG(DBB00OU)
                                        (0123) ;  Instance name BackRightMotor_N, User Module PWM8
                                        (0124) ;       Instance name BackRightMotor_N, Block Name PWM8(DBB11)
                                        (0125) 	db		34h, 21h		;BackRightMotor_N_FUNC_REG(DBB11FN)
                                        (0126) 	db		35h, 16h		;BackRightMotor_N_INPUT_REG(DBB11IN)
                                        (0127) 	db		36h, 47h		;BackRightMotor_N_OUTPUT_REG(DBB11OU)
                                        (0128) ;  Instance name BackRightMotor_P, User Module PWM8
                                        (0129) ;       Instance name BackRightMotor_P, Block Name PWM8(DBB10)
                                        (0130) 	db		30h, 21h		;BackRightMotor_P_FUNC_REG(DBB10FN)
                                        (0131) 	db		31h, 16h		;BackRightMotor_P_INPUT_REG(DBB10IN)
                                        (0132) 	db		32h, 45h		;BackRightMotor_P_OUTPUT_REG(DBB10OU)
                                        (0133) ;  Instance name I2Cs, User Module EzI2Cs
                                        (0134) ;  Instance name Range_ADC, User Module ADCINC
                                        (0135) ;       Instance name Range_ADC, Block Name ADC(ASD11)
                                        (0136) ;       Instance name Range_ADC, Block Name PWM(DBB20)
                                        (0137) 	db		40h, 31h		;Range_ADC_PWMfn(DBB20FN)
                                        (0138) 	db		41h, 16h		;Range_ADC_PWMsl(DBA20IN)
                                        (0139) 	db		42h, 40h		;Range_ADC_PWMos(DBA20OU)
                                        (0140) ;  Instance name Range_PGA, User Module PGA
                                        (0141) ;       Instance name Range_PGA, Block Name GAIN(ACB01)
                                        (0142) ;  Instance name Servo_PWM, User Module PWM16
                                        (0143) ;       Instance name Servo_PWM, Block Name PWM16_LSB(DBB21)
                                        (0144) 	db		44h, 01h		;Servo_PWM_FUNC_LSB_REG(DBB21FN)
                                        (0145) 	db		45h, 11h		;Servo_PWM_INPUT_LSB_REG(DBB21IN)
                                        (0146) 	db		46h, 40h		;Servo_PWM_OUTPUT_LSB_REG(DBB21OU)
                                        (0147) ;       Instance name Servo_PWM, Block Name PWM16_MSB(DCB22)
                                        (0148) 	db		48h, 21h		;Servo_PWM_FUNC_MSB_REG(DCB22FN)
                                        (0149) 	db		49h, 31h		;Servo_PWM_INPUT_MSB_REG(DCB22IN)
                                        (0150) 	db		4ah, 47h		;Servo_PWM_OUTPUT_MSB_REG(DCB22OU)
                                        (0151) ;  Global Register values Bank 1
                                        (0152) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0153) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0154) 	db		60h, 05h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0155) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0156) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0157) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0158) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0159) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0160) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0161) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0162) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0163) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0164) 	db		e1h, 32h		; OscillatorControl_1 register (OSC_CR1)
                                        (0165) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0166) 	db		dfh, 6eh		; OscillatorControl_3 register (OSC_CR3)
                                        (0167) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0168) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0169) 	db		e7h, 48h		; Type2Decimator_Control register (DEC_CR2)
                                        (0170) 	db		ffh
                                        (0171) AREA psoc_config(rom, rel)
                                        (0172) LoadConfigTBL_rpi_robot_Ordered:
                                        (0173) ;  Ordered Global Register values
                                        (0174) 	M8C_SetBank0
029A: 62 00 0B MOV   REG[0x0],0xB       (0175) 	mov	reg[00h], 0bh		; Port_0_Data register (PRT0DR)
029D: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
029F: 62 00 0B MOV   REG[0x0],0xB       (0177) 	mov	reg[00h], 0bh		; Port_0_DriveMode_0 register (PRT0DM0)
02A2: 62 01 F4 MOV   REG[0x1],0xF4      (0178) 	mov	reg[01h], f4h		; Port_0_DriveMode_1 register (PRT0DM1)
02A5: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
02A7: 62 03 F4 MOV   REG[0x3],0xF4      (0180) 	mov	reg[03h], f4h		; Port_0_DriveMode_2 register (PRT0DM2)
02AA: 62 02 00 MOV   REG[0x2],0x0       (0181) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
02AD: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
02AF: 62 02 00 MOV   REG[0x2],0x0       (0183) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02B2: 62 03 00 MOV   REG[0x3],0x0       (0184) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02B5: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
02B7: 62 01 00 MOV   REG[0x1],0x0       (0186) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02BA: 62 04 03 MOV   REG[0x4],0x3       (0187) 	mov	reg[04h], 03h		; Port_1_Data register (PRT1DR)
02BD: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
02BF: 62 04 0B MOV   REG[0x4],0xB       (0189) 	mov	reg[04h], 0bh		; Port_1_DriveMode_0 register (PRT1DM0)
02C2: 62 05 F7 MOV   REG[0x5],0xF7      (0190) 	mov	reg[05h], f7h		; Port_1_DriveMode_1 register (PRT1DM1)
02C5: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
02C7: 62 07 F7 MOV   REG[0x7],0xF7      (0192) 	mov	reg[07h], f7h		; Port_1_DriveMode_2 register (PRT1DM2)
02CA: 62 06 08 MOV   REG[0x6],0x8       (0193) 	mov	reg[06h], 08h		; Port_1_GlobalSelect register (PRT1GS)
02CD: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
02CF: 62 06 00 MOV   REG[0x6],0x0       (0195) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02D2: 62 07 00 MOV   REG[0x7],0x0       (0196) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
02D5: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
02D7: 62 05 00 MOV   REG[0x5],0x0       (0198) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
02DA: 62 08 00 MOV   REG[0x8],0x0       (0199) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02DD: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
02DF: 62 08 FF MOV   REG[0x8],0xFF      (0201) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
02E2: 62 09 00 MOV   REG[0x9],0x0       (0202) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
02E5: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
02E7: 62 0B 00 MOV   REG[0xB],0x0       (0204) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
02EA: 62 0A FF MOV   REG[0xA],0xFF      (0205) 	mov	reg[0ah], ffh		; Port_2_GlobalSelect register (PRT2GS)
02ED: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
02EF: 62 0A 00 MOV   REG[0xA],0x0       (0207) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02F2: 62 0B 00 MOV   REG[0xB],0x0       (0208) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02F5: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
02F7: 62 09 00 MOV   REG[0x9],0x0       (0210) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02FA: 62 0C 00 MOV   REG[0xC],0x0       (0211) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02FD: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
02FF: 62 0C 00 MOV   REG[0xC],0x0       (0213) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0302: 62 0D 00 MOV   REG[0xD],0x0       (0214) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0305: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
0307: 62 0F 00 MOV   REG[0xF],0x0       (0216) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
030A: 62 0E 00 MOV   REG[0xE],0x0       (0217) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
030D: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
030F: 62 0E 00 MOV   REG[0xE],0x0       (0219) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0312: 62 0F 00 MOV   REG[0xF],0x0       (0220) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0315: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
0317: 62 0D 00 MOV   REG[0xD],0x0       (0222) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
031A: 62 10 00 MOV   REG[0x10],0x0      (0223) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
031D: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
031F: 62 10 00 MOV   REG[0x10],0x0      (0225) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0322: 62 11 00 MOV   REG[0x11],0x0      (0226) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0325: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
0327: 62 13 00 MOV   REG[0x13],0x0      (0228) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
032A: 62 12 00 MOV   REG[0x12],0x0      (0229) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
032D: 71 10    OR    F,0x10             
                                        (0230) 	M8C_SetBank1
032F: 62 12 00 MOV   REG[0x12],0x0      (0231) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0332: 62 13 00 MOV   REG[0x13],0x0      (0232) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0335: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
0337: 62 11 00 MOV   REG[0x11],0x0      (0234) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
033A: 62 14 00 MOV   REG[0x14],0x0      (0235) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
033D: 71 10    OR    F,0x10             
                                        (0236) 	M8C_SetBank1
033F: 62 14 00 MOV   REG[0x14],0x0      (0237) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0342: 62 15 00 MOV   REG[0x15],0x0      (0238) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0345: 70 EF    AND   F,0xEF             
                                        (0239) 	M8C_SetBank0
0347: 62 17 00 MOV   REG[0x17],0x0      (0240) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
034A: 62 16 00 MOV   REG[0x16],0x0      (0241) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
034D: 71 10    OR    F,0x10             
                                        (0242) 	M8C_SetBank1
034F: 62 16 00 MOV   REG[0x16],0x0      (0243) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0352: 62 17 00 MOV   REG[0x17],0x0      (0244) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0355: 70 EF    AND   F,0xEF             
                                        (0245) 	M8C_SetBank0
0357: 62 15 00 MOV   REG[0x15],0x0      (0246) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
035A: 62 18 00 MOV   REG[0x18],0x0      (0247) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
035D: 71 10    OR    F,0x10             
                                        (0248) 	M8C_SetBank1
035F: 62 18 00 MOV   REG[0x18],0x0      (0249) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0362: 62 19 00 MOV   REG[0x19],0x0      (0250) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0365: 70 EF    AND   F,0xEF             
                                        (0251) 	M8C_SetBank0
0367: 62 1B 00 MOV   REG[0x1B],0x0      (0252) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
036A: 62 1A 00 MOV   REG[0x1A],0x0      (0253) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
036D: 71 10    OR    F,0x10             
                                        (0254) 	M8C_SetBank1
036F: 62 1A 00 MOV   REG[0x1A],0x0      (0255) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0372: 62 1B 00 MOV   REG[0x1B],0x0      (0256) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0375: 70 EF    AND   F,0xEF             
                                        (0257) 	M8C_SetBank0
0377: 62 19 00 MOV   REG[0x19],0x0      (0258) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
037A: 62 1C 00 MOV   REG[0x1C],0x0      (0259) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
037D: 71 10    OR    F,0x10             
                                        (0260) 	M8C_SetBank1
037F: 62 1C 00 MOV   REG[0x1C],0x0      (0261) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0382: 62 1D 00 MOV   REG[0x1D],0x0      (0262) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0385: 70 EF    AND   F,0xEF             
                                        (0263) 	M8C_SetBank0
0387: 62 1F 00 MOV   REG[0x1F],0x0      (0264) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
038A: 62 1E 00 MOV   REG[0x1E],0x0      (0265) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
038D: 71 10    OR    F,0x10             
                                        (0266) 	M8C_SetBank1
038F: 62 1E 00 MOV   REG[0x1E],0x0      (0267) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0392: 62 1F 00 MOV   REG[0x1F],0x0      (0268) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0395: 70 EF    AND   F,0xEF             
                                        (0269) 	M8C_SetBank0
0397: 62 1D 00 MOV   REG[0x1D],0x0      (0270) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
039A: 70 EF    AND   F,0xEF             
                                        (0271) 	M8C_SetBank0
039C: 7F       RET                      (0272) 	ret
                                        (0273) 
                                        (0274) 
                                        (0275) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_rpi_robot
                                        (0026) export _LoadConfig_rpi_robot
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
039D: 7C 03 A4 LCALL 0x03A4             (0058) 	lcall	LoadConfig_rpi_robot
03A0: 7C 02 98 LCALL 0x0298             (0059) 	lcall	LoadConfigTBL_rpi_robot_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
03A3: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration rpi_robot
                                        (0067) ;
                                        (0068) ;    Load configuration registers for rpi_robot.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_rpi_robot:
                                        (0085)  LoadConfig_rpi_robot:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
03A4: 10       PUSH  X                  (0088) 	push	x
03A5: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
03A7: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
03A9: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
03AA: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_rpi_robot_Bank0
03AC: 57 BE    MOV   X,0xBE             (0094)     mov     X, <LoadConfigTBL_rpi_robot_Bank0
03AE: 7C 03 BF LCALL 0x03BF             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
03B1: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
03B3: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
03B4: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_rpi_robot_Bank1
03B6: 57 47    MOV   X,0x47             (0101)     mov     X, <LoadConfigTBL_rpi_robot_Bank1
03B8: 7C 03 BF LCALL 0x03BF             (0102)     lcall   LoadConfig              ; Load the bank 1 values
03BB: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
03BD: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
03BE: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
03BF: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
03C1: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
03C2: 08       PUSH  A                  (0132)     push    A
03C3: 4F       MOV   X,SP               (0133)     mov     X, SP
03C4: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
03C7: D0 04    JNC   0x03CC             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03C9: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
03CC: 18       POP   A                  (0138)     pop     A
03CD: 20       POP   X                  (0139)     pop     X
03CE: 70 EF    AND   F,0xEF             
03D0: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03D3: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
03D4: 08       PUSH  A                  (0145)     push    A
03D5: 28       ROMX                     (0146)     romx                            ; Load register address from table
03D6: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
03D8: A0 1F    JZ    0x03F8             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
03DA: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
03DB: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
03DE: A0 03    JZ    0x03E2             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03E0: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
03E2: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
03E4: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
03E5: 20       POP   X                  (0156)     pop     X
03E6: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
03E7: 09 00    ADC   A,0x0              (0158)     adc     A, 0
03E9: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
03EA: 08       PUSH  A                  (0160)     push    A
03EB: 28       ROMX                     (0161)     romx                            ; load config data from the table
03EC: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
03ED: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
03EF: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
03F1: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
03F2: 20       POP   X                  (0166)     pop     X
03F3: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
03F4: 09 00    ADC   A,0x0              (0168)     adc     A, 0
03F6: 8F D7    JMP   0x03CE             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
03F8: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
03FA: 70 3F    AND   F,0x3F             
03FC: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
03FE: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\servo_pwmint.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Servo_PWMINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "Servo_PWM.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Servo_PWM_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Servo_PWM_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Servo_PWM_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03FF: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Servo_PWMINT.asm
FILE: lib\servo_pwm.asm                 (0001) ;;*****************************************************************************
0400: 43 DF 04 OR    REG[0xDF],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Servo_PWM.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "Servo_PWM.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Servo_PWM_EnableInt
                                        (0030) export _Servo_PWM_EnableInt
                                        (0031) export  Servo_PWM_DisableInt
                                        (0032) export _Servo_PWM_DisableInt
                                        (0033) export  Servo_PWM_Start
                                        (0034) export _Servo_PWM_Start
                                        (0035) export  Servo_PWM_Stop
                                        (0036) export _Servo_PWM_Stop
                                        (0037) export  Servo_PWM_WritePeriod
                                        (0038) export _Servo_PWM_WritePeriod
                                        (0039) export  Servo_PWM_WritePulseWidth
                                        (0040) export _Servo_PWM_WritePulseWidth
                                        (0041) export  Servo_PWM_wReadPulseWidth
                                        (0042) export _Servo_PWM_wReadPulseWidth
                                        (0043) export  Servo_PWM_wReadCounter
                                        (0044) export _Servo_PWM_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wServo_PWM_ReadPulseWidth    ; deprecated
                                        (0049) export _wServo_PWM_ReadPulseWidth    ; deprecated
                                        (0050) export  wServo_PWM_ReadCounter       ; deprecated
                                        (0051) export _wServo_PWM_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA rpi_robot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: Servo_PWM_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  Servo_PWM_EnableInt:
                                        (0091) _Servo_PWM_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    Servo_PWM_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0403: 7F       RET                      (0095)    ret
0404: 41 DF FB AND   REG[0xDF],0xFB     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: Servo_PWM_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  Servo_PWM_DisableInt:
                                        (0119) _Servo_PWM_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    Servo_PWM_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0407: 7F       RET                      (0123)    ret
0408: 43 47 01 OR    REG[0x47],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: Servo_PWM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  Servo_PWM_Start:
                                        (0148) _Servo_PWM_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    Servo_PWM_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
040B: 7F       RET                      (0152)    ret
040C: 41 47 FE AND   REG[0x47],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: Servo_PWM_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  Servo_PWM_Stop:
                                        (0176) _Servo_PWM_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    Servo_PWM_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
040F: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: Servo_PWM_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  Servo_PWM_WritePeriod:
                                        (0206) _Servo_PWM_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0410: 60 45    MOV   REG[0x45],A        (0208)    mov   reg[Servo_PWM_PERIOD_LSB_REG], A
0412: 5B       MOV   A,X                (0209)    mov   A, X
0413: 60 49    MOV   REG[0x49],A        (0210)    mov   reg[Servo_PWM_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0415: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: Servo_PWM_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  Servo_PWM_WritePulseWidth:
                                        (0235) _Servo_PWM_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0416: 60 46    MOV   REG[0x46],A        (0237)    mov   reg[Servo_PWM_COMPARE_LSB_REG], A
0418: 5B       MOV   A,X                (0238)    mov   A, X
0419: 60 4A    MOV   REG[0x4A],A        (0239)    mov   reg[Servo_PWM_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
041B: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: Servo_PWM_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  Servo_PWM_wReadPulseWidth:
                                        (0264) _Servo_PWM_wReadPulseWidth:
                                        (0265)  wServo_PWM_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wServo_PWM_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
041C: 5D 4A    MOV   A,REG[0x4A]        (0268)    mov   A, reg[Servo_PWM_COMPARE_MSB_REG]
041E: 5C       MOV   X,A                (0269)    mov   X, A
041F: 5D 46    MOV   A,REG[0x46]        (0270)    mov   A, reg[Servo_PWM_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0421: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: Servo_PWM_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  Servo_PWM_wReadCounter:
                                        (0299) _Servo_PWM_wReadCounter:
                                        (0300)  wServo_PWM_ReadCounter:                         ; this name deprecated
                                        (0301) _wServo_PWM_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0422: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0423: 5D 4A    MOV   A,REG[0x4A]        (0310)    mov   A, reg[Servo_PWM_COMPARE_MSB_REG]       ; Save the Compare register on the stack
0425: 08       PUSH  A                  (0311)    push  A                                          ;
0426: 5D 46    MOV   A,REG[0x46]        (0312)    mov   A, reg[Servo_PWM_COMPARE_LSB_REG]       ;
0428: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0429: 41 47 FE AND   REG[0x47],0xFE     
042C: 71 10    OR    F,0x10             
                                        (0314)    Servo_PWM_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
042E: 5D 45    MOV   A,REG[0x45]        (0316)    mov   A, reg[Servo_PWM_INPUT_LSB_REG]         ; save the LSB clock input setting
0430: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0431: 62 45 00 MOV   REG[0x45],0x0      (0319)    mov   reg[Servo_PWM_INPUT_LSB_REG], INPUT_REG_NULL
0434: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0436: 5D 48    MOV   A,REG[0x48]        (0321)    mov   A, reg[Servo_PWM_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
0438: 5D 4A    MOV   A,REG[0x4A]        (0322)    mov   A, reg[Servo_PWM_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
043A: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
043B: 5D 44    MOV   A,REG[0x44]        (0324)    mov   A, reg[Servo_PWM_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
043D: 5D 46    MOV   A,REG[0x46]        (0325)    mov   A, reg[Servo_PWM_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
043F: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0440: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0442: 60 4A    MOV   REG[0x4A],A        (0328)    mov   reg[Servo_PWM_COMPARE_MSB_REG], A       ;
0444: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0446: 60 46    MOV   REG[0x46],A        (0330)    mov   reg[Servo_PWM_COMPARE_LSB_REG], A       ;
0448: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
044A: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
044C: 60 45    MOV   REG[0x45],A        (0333)    mov   reg[Servo_PWM_INPUT_LSB_REG], A         ;    and restore it
044E: 70 EF    AND   F,0xEF             
0450: 43 47 01 OR    REG[0x47],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    Servo_PWM_Start_M                             ; Now re-enable the PWM function
0453: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0454: 20       POP   X                  (0337)    pop   X                                          ;
0455: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0457: 70 3F    AND   F,0x3F             
0459: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
045B: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File Servo_PWM.asm
FILE: lib\range_pga.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   Range_PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "Range_PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  Range_PGA_Start
                                        (0060) export _Range_PGA_Start
                                        (0061) export  Range_PGA_SetPower
                                        (0062) export _Range_PGA_SetPower
                                        (0063) 
                                        (0064) export  Range_PGA_SetGain
                                        (0065) export _Range_PGA_SetGain
                                        (0066) 
                                        (0067) export  Range_PGA_Stop
                                        (0068) export _Range_PGA_Stop
                                        (0069) 
                                        (0070) IF (Range_PGA_AGNDBUFAPI)
                                        (0071) export  Range_PGA_EnableAGNDBuffer
                                        (0072) export _Range_PGA_EnableAGNDBuffer
                                        (0073) export  Range_PGA_DisableAGNDBuffer
                                        (0074) export _Range_PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: Range_PGA_Start
                                        (0092) ;  FUNCTION NAME: Range_PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  Range_PGA_Start:
                                        (0111) _Range_PGA_Start:
                                        (0112)  Range_PGA_SetPower:
                                        (0113) _Range_PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
045C: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
045E: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
045F: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0460: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[Range_PGA_GAIN_CR2]                         ; read power value
0462: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0464: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0466: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[Range_PGA_GAIN_CR2], A                    ; move complete value back to register
0468: 18       POP   A                  (0124)    pop  A
0469: 70 3F    AND   F,0x3F             
046B: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
046D: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: Range_PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Range_PGA_SetGain:
                                        (0154) _Range_PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
046E: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0470: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0471: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0472: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[Range_PGA_GAIN_CR0]                         ; read mux settings
0474: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0476: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0479: B0 0E    JNZ   0x0488             (0164)    jnz  .SETHIGHGAIN
047B: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[Range_PGA_GAIN_CR3],~EXGAIN                    ; Clear High Gain bit.
047E: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0480: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[Range_PGA_GAIN_CR0], A                         ; move complete value back to register
0482: 18       POP   A                  (0168)    pop  A
0483: 70 3F    AND   F,0x3F             
0485: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0487: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0488: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
048B: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
048D: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[Range_PGA_GAIN_CR0], A                         ; move complete value back to register
048F: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[Range_PGA_GAIN_CR3], EXGAIN                    ; Set High Gain bit.
0492: 18       POP   A                  (0177)    pop  A
0493: 70 3F    AND   F,0x3F             
0495: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0497: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: Range_PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  Range_PGA_Stop:
                                        (0203) _Range_PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0498: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[Range_PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
049B: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (Range_PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: Range_PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  Range_PGA_EnableAGNDBuffer:
                                        (0233) _Range_PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[Range_PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: Range_PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  Range_PGA_DisableAGNDBuffer:
                                        (0261) _Range_PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[Range_PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File Range_PGA.asm
FILE: lib\range_adcint.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Range_ADCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "Range_ADC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _Range_ADC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _Range_ADC_iResult
                                        (0026) export  Range_ADC_iResult
                                        (0027) export _Range_ADC_fStatus
                                        (0028) export  Range_ADC_fStatus
                                        (0029) export _Range_ADC_bState
                                        (0030) export  Range_ADC_bState
                                        (0031) export _Range_ADC_fMode
                                        (0032) export  Range_ADC_fMode
                                        (0033) export _Range_ADC_bNumSamples
                                        (0034) export  Range_ADC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  Range_ADC_iResult:
                                        (0041) _Range_ADC_iResult:                        BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  Range_ADC_fStatus:
                                        (0044) _Range_ADC_fStatus:                        BLK  1 ;ADC Status
                                        (0045)  Range_ADC_bState:
                                        (0046) _Range_ADC_bState:                         BLK  1 ;State value of ADC count
                                        (0047)  Range_ADC_fMode:
                                        (0048) _Range_ADC_fMode:                          BLK  1 ;Integrate and reset mode.
                                        (0049)  Range_ADC_bNumSamples:
                                        (0050) _Range_ADC_bNumSamples:                    BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _Range_ADC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _Range_ADC_ADConversion_ISR:
049C: 7A 05    DEC   [0x5]              (0093)     dec  [Range_ADC_bState]
                                        (0094) if1:
049E: C0 02    JC    0x04A1             (0095)     jc endif1 ; no underflow
04A0: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
04A1: 3C 06 00 CMP   [0x6],0x0          (0098)     cmp [Range_ADC_fMode],0
                                        (0099) if2: 
04A4: B0 12    JNZ   0x04B7             (0100)     jnz endif2  ;leaving reset mode
04A6: 08       PUSH  A                  (0101)     push A                            ;read decimator
04A7: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
04A9: 53 03    MOV   [0x3],A            (0103)     mov  [iTemp + LowByte],A
04AB: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
04AD: 53 02    MOV   [0x2],A            (0105)     mov  [iTemp + HighByte], A
04AF: 18       POP   A                  (0106)     pop A
04B0: 55 06 01 MOV   [0x6],0x1          (0107)     mov [Range_ADC_fMode],1
04B3: 55 05 3F MOV   [0x5],0x3F         (0108)     mov [Range_ADC_bState],((1<<(Range_ADC_bNUMBITS- 6))-1)
04B6: 7E       RETI                     (0109)     reti
04B7: 43 86 20 OR    REG[0x86],0x20     
04BA: 43 87 10 OR    REG[0x87],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     Range_ADC_RESET_INTEGRATOR_M
04BD: 08       PUSH  A                  (0113)     push A
04BE: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
04C0: 12 03    SUB   A,[0x3]            (0115)     sub  A,[iTemp + LowByte]
04C2: 53 03    MOV   [0x3],A            (0116)     mov  [iTemp +LowByte],A
04C4: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
04C6: 1A 02    SBB   A,[0x2]            (0118)     sbb  A,[iTemp + HighByte]
                                        (0119) 
                                        (0120)        ;check for overflow
                                        (0121) IF     Range_ADC_8_OR_MORE_BITS
04C8: 39 10    CMP   A,0x10             (0122)     cmp A,(1<<(Range_ADC_bNUMBITS - 8))
                                        (0123) if3: 
04CA: B0 05    JNZ   0x04D0             (0124)     jnz endif3 ;overflow
04CC: 78       DEC   A                  (0125)     dec A
04CD: 55 03 FF MOV   [0x3],0xFF         (0126)     mov [iTemp + LowByte],ffh
                                        (0127) endif3:
                                        (0128) ELSE
                                        (0129)     cmp [iTemp + LowByte],(1<<(Range_ADC_bNUMBITS))
                                        (0130) if4: 
                                        (0131)     jnz endif4 ;overflow
                                        (0132)     dec [iTemp + LowByte]
                                        (0133) endif4:
                                        (0134) ENDIF
                                        (0135) IF Range_ADC_SIGNED_DATA
                                        (0136) IF Range_ADC_9_OR_MORE_BITS
                                        (0137)     sub A,(1<<(Range_ADC_bNUMBITS - 9))
                                        (0138) ELSE
                                        (0139)     sub [iTemp +LowByte],(1<<(Range_ADC_bNUMBITS - 1))
                                        (0140)     sbb A,0
                                        (0141) ENDIF
                                        (0142) ENDIF
04D0: 5F 01 03 MOV   [0x1],[0x3]        (0143)     mov  [Range_ADC_iResult + LowByte],[iTemp +LowByte]
04D3: 53 00    MOV   [0x0],A            (0144)     mov  [Range_ADC_iResult + HighByte],A
04D5: 55 04 01 MOV   [0x4],0x1          (0145)     mov  [Range_ADC_fStatus],1
                                        (0146) ConversionReady:
                                        (0147)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0148)     ;---------------------------------------------------
                                        (0149)     ; Insert your custom code below this banner
                                        (0150)     ;---------------------------------------------------
                                        (0151)     ;  Sample data is now in iResult
                                        (0152)     ;
                                        (0153)     ;  NOTE: This interrupt service routine has already
                                        (0154)     ;  preserved the values of the A CPU register. If
                                        (0155)     ;  you need to use the X register you must preserve
                                        (0156)     ;  its value and restore it before the return from
                                        (0157)     ;  interrupt.
                                        (0158)     ;---------------------------------------------------
                                        (0159)     ; Insert your custom code above this banner
                                        (0160)     ;---------------------------------------------------
                                        (0161)     ;@PSoC_UserCode_END@ (Do not change this line.)
04D8: 18       POP   A                  (0162)     pop A
04D9: 3C 07 00 CMP   [0x7],0x0          (0163)     cmp [Range_ADC_bNumSamples],0
                                        (0164) if5: 
04DC: B0 0E    JNZ   0x04EB             (0165)     jnz endif5 ; Number of samples is zero
04DE: 55 06 00 MOV   [0x6],0x0          (0166)     mov [Range_ADC_fMode],0
04E1: 55 05 00 MOV   [0x5],0x0          (0167)     mov [Range_ADC_bState],0
04E4: 41 87 EF AND   REG[0x87],0xEF     
04E7: 41 86 DF AND   REG[0x86],0xDF     
                                        (0168)     Range_ADC_ENABLE_INTEGRATOR_M
04EA: 7E       RETI                     (0169)     reti       
                                        (0170) endif5:
04EB: 7A 07    DEC   [0x7]              (0171)     dec [Range_ADC_bNumSamples]
                                        (0172) if6:
04ED: A0 0E    JZ    0x04FC             (0173)     jz endif6  ; count not zero
04EF: 55 06 00 MOV   [0x6],0x0          (0174)     mov [Range_ADC_fMode],0
04F2: 55 05 00 MOV   [0x5],0x0          (0175)     mov [Range_ADC_bState],0
04F5: 41 87 EF AND   REG[0x87],0xEF     
04F8: 41 86 DF AND   REG[0x86],0xDF     
                                        (0176)     Range_ADC_ENABLE_INTEGRATOR_M
04FB: 7E       RETI                     (0177)     reti       
04FC: 71 10    OR    F,0x10             
                                        (0178) endif6:
                                        (0179)     ;All samples done
                                        (0180)     M8C_SetBank1
04FE: 41 E7 3F AND   REG[0xE7],0x3F     (0181)     and reg[E7h], 3Fh            ; if we are in 29xxx or 24x94   
0501: 43 E7 80 OR    REG[0xE7],0x80     (0182)     or  reg[E7h], 80h            ; then set to incremental Mode
0504: 70 EF    AND   F,0xEF             
0506: 41 DF FE AND   REG[0xDF],0xFE     
                                        (0183)     M8C_SetBank0
                                        (0184)     Range_ADC_STOPADC_M
0509: 7E       RETI                     (0185)  reti 
                                        (0186) ; end of file Range_ADCINT.asm
FILE: lib\range_adc.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Range_ADC.asm
                                        (0004) ;;   Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "Range_ADC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  Range_ADC_Start
                                        (0031) export _Range_ADC_Start
                                        (0032) export  Range_ADC_SetPower
                                        (0033) export _Range_ADC_SetPower
                                        (0034) export  Range_ADC_Stop
                                        (0035) export _Range_ADC_Stop
                                        (0036) export  Range_ADC_GetSamples
                                        (0037) export _Range_ADC_GetSamples
                                        (0038) export  Range_ADC_StopADC
                                        (0039) export _Range_ADC_StopADC
                                        (0040) export  Range_ADC_fIsDataAvailable
                                        (0041) export _Range_ADC_fIsDataAvailable
                                        (0042) export  Range_ADC_iClearFlagGetData
                                        (0043) export _Range_ADC_iClearFlagGetData
                                        (0044) export  Range_ADC_wClearFlagGetData
                                        (0045) export _Range_ADC_wClearFlagGetData
                                        (0046) export  Range_ADC_cClearFlagGetData
                                        (0047) export _Range_ADC_cClearFlagGetData
                                        (0048) export  Range_ADC_bClearFlagGetData
                                        (0049) export _Range_ADC_bClearFlagGetData
                                        (0050) export  Range_ADC_iGetData
                                        (0051) export _Range_ADC_iGetData
                                        (0052) export  Range_ADC_wGetData
                                        (0053) export _Range_ADC_wGetData
                                        (0054) export  Range_ADC_bGetData
                                        (0055) export _Range_ADC_bGetData
                                        (0056) export  Range_ADC_cGetData
                                        (0057) export _Range_ADC_cGetData
                                        (0058) export  Range_ADC_fClearFlag
                                        (0059) export _Range_ADC_fClearFlag
                                        (0060) export  Range_ADC_WritePulseWidth
                                        (0061) export _Range_ADC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Range_ADC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0090) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0091) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0092) ;    functions.
                                        (0093) ;
                                        (0094)  Range_ADC_Start:
                                        (0095) _Range_ADC_Start:
                                        (0096)    RAM_PROLOGUE RAM_USE_CLASS_1
050A: 90 0D    CALL  _Range_ADC_SetPower(0097)    call  Range_ADC_SetPower
050C: 43 86 20 OR    REG[0x86],0x20     
050F: 43 87 10 OR    REG[0x87],0x10     
                                        (0098)    Range_ADC_RESET_INTEGRATOR_M
0512: 62 41 FF MOV   REG[0x41],0xFF     (0099)    mov   reg[Range_ADC_PWMdr1],ffh
0515: 43 43 01 OR    REG[0x43],0x1      (0100)    or    reg[Range_ADC_PWMcr0],01h                   ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0518: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: Range_ADC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0118) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0119) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0120) ;    functions.
                                        (0121) ;
                                        (0122)  Range_ADC_SetPower:
                                        (0123) _Range_ADC_SetPower:
                                        (0124)    RAM_PROLOGUE RAM_USE_CLASS_2
0519: 4F       MOV   X,SP               (0125)    mov  X,SP                                     ; Set up Stack frame
051A: 21 03    AND   A,0x3              (0126)    and  A,03h                                    ; Ensure value is legal
051C: 08       PUSH  A                  (0127)    push A
051D: 5D 87    MOV   A,REG[0x87]        (0128)    mov  A,reg[Range_ADC_AtoDcr3]                 ; First SC block:
051F: 21 FC    AND   A,0xFC             (0129)    and  A,~03h                                   ;   clear power bits to zero
0521: 2B 00    OR    A,[X+0]            (0130)    or   A,[ X ]                                  ;   establish new value
0523: 60 87    MOV   REG[0x87],A        (0131)    mov  reg[Range_ADC_AtoDcr3],A                 ;   change the actual setting
0525: 18       POP   A                  (0132)    pop  A
0526: 70 3F    AND   F,0x3F             
0528: 71 C0    OR    F,0xC0             
                                        (0133)    RAM_EPILOGUE RAM_USE_CLASS_2
052A: 7F       RET                      (0134)    ret
052B: 41 DF FE AND   REG[0xDF],0xFE     
                                        (0135) .ENDSECTION
                                        (0136) 
                                        (0137) .SECTION
                                        (0138) ;-----------------------------------------------------------------------------
                                        (0139) ;  FUNCTION NAME: Range_ADC_Stop
                                        (0140) ;
                                        (0141) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0142) ;                 and turns off PWM
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;
                                        (0145) ;  ARGUMENTS:     None.
                                        (0146) ;  RETURNS:       Nothing.
                                        (0147) ;  SIDE EFFECTS:
                                        (0148) ;    The A and X registers may be modified by this or future implementations
                                        (0149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0151) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0152) ;    functions.
                                        (0153) ;
                                        (0154)  Range_ADC_Stop:
                                        (0155) _Range_ADC_Stop:
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0157)    Range_ADC_STOPADC_M
052E: 41 87 FC AND   REG[0x87],0xFC     (0158)    and  reg[Range_ADC_AtoDcr3], ~03h
0531: 41 43 FE AND   REG[0x43],0xFE     (0159)    and  reg[Range_ADC_PWMcr0], ~01h ; stop PWM
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0534: 7F       RET                      (0161)    ret
0535: 62 D0 00 MOV   REG[0xD0],0x0      
0538: 41 87 EF AND   REG[0x87],0xEF     
053B: 41 86 DF AND   REG[0x86],0xDF     
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) 
                                        (0165) .SECTION
                                        (0166) ;-----------------------------------------------------------------------------
                                        (0167) ;  FUNCTION NAME: Range_ADC_GetSamples
                                        (0168) ;
                                        (0169) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    A register contain number of samples
                                        (0173) ;  RETURNS:      Nothing.
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;          
                                        (0181) ;    Currently only the page pointer registers listed below are modified: 
                                        (0182) ;          CUR_PP
                                        (0183) ;
                                        (0184)  Range_ADC_GetSamples:
                                        (0185) _Range_ADC_GetSamples:
                                        (0186)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0187)    RAM_SETPAGE_CUR >Range_ADC_fMode
                                        (0188)    Range_ADC_ENABLE_INTEGRATOR_M
053E: 55 06 00 MOV   [0x6],0x0          (0189)    mov [Range_ADC_fMode],0
0541: 55 05 00 MOV   [0x5],0x0          (0190)    mov [Range_ADC_bState],0
0544: 53 07    MOV   [0x7],A            (0191)    mov [Range_ADC_bNumSamples],A
0546: 5D 42    MOV   A,REG[0x42]        (0192)    mov A, reg[Range_ADC_PWMdr2]
0548: B0 04    JNZ   0x054D             (0193)    jnz  .SkipPulseWrite
054A: 62 42 01 MOV   REG[0x42],0x1      (0194)    mov reg[Range_ADC_PWMdr2], 1
054D: 71 10    OR    F,0x10             
                                        (0195) .SkipPulseWrite:
                                        (0196) 
                                        (0197)    M8C_SetBank1
054F: 41 E7 3F AND   REG[0xE7],0x3F     (0198)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0552: 43 E7 40 OR    REG[0xE7],0x40     (0199)    or  reg[E7h], 40h             ; then set to incremental Mode
0555: 70 EF    AND   F,0xEF             
0557: 62 DC FE MOV   REG[0xDC],0xFE     
055A: 43 DF 01 OR    REG[0xDF],0x1      
                                        (0200)    M8C_SetBank0
                                        (0201) 
                                        (0202)    Range_ADC_STARTADC_M  ;enable interrupt 
                                        (0203)    RAM_EPILOGUE RAM_USE_CLASS_4 
055D: 7F       RET                      (0204)    ret
055E: 71 10    OR    F,0x10             
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) 
                                        (0208) .SECTION
                                        (0209) ;-----------------------------------------------------------------------------
                                        (0210) ;  FUNCTION NAME: Range_ADC_StopADC
                                        (0211) ;
                                        (0212) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0213) ;               is disabled but the PWM output is still active.
                                        (0214) ;               Integrator is reset
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS:    None.
                                        (0218) ;  RETURNS:      Nothing.
                                        (0219) ;  SIDE EFFECTS:
                                        (0220) ;    The A and X registers may be modified by this or future implementations
                                        (0221) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0222) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0223) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0224) ;    functions.
                                        (0225) ;
                                        (0226)  Range_ADC_StopADC:
                                        (0227) _Range_ADC_StopADC:
                                        (0228)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0229)    M8C_SetBank1
0560: 41 E7 3F AND   REG[0xE7],0x3F     (0230)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0563: 43 E7 80 OR    REG[0xE7],0x80     (0231)    or  reg[E7h], 80h             ; then set to incremental Mode
0566: 70 EF    AND   F,0xEF             
0568: 41 DF FE AND   REG[0xDF],0xFE     
056B: 43 86 20 OR    REG[0x86],0x20     
056E: 43 87 10 OR    REG[0x87],0x10     
                                        (0232)    M8C_SetBank0
                                        (0233)    Range_ADC_STOPADC_M
                                        (0234)    Range_ADC_RESET_INTEGRATOR_M
                                        (0235)    RAM_EPILOGUE RAM_USE_CLASS_1 
0571: 7F       RET                      (0236)    ret
0572: 62 D0 00 MOV   REG[0xD0],0x0      
0575: 51 04    MOV   A,[0x4]            
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: Range_ADC_fIsDataAvailable
                                        (0243) ;
                                        (0244) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  ARGUMENTS:    None.
                                        (0247) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0248) ;  SIDE EFFECTS:
                                        (0249) ;    The A and X registers may be modified by this or future implementations
                                        (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0253) ;    functions.
                                        (0254) ;          
                                        (0255) ;    Currently only the page pointer registers listed below are modified: 
                                        (0256) ;          CUR_PP
                                        (0257) ;
                                        (0258)  Range_ADC_fIsDataAvailable:
                                        (0259) _Range_ADC_fIsDataAvailable:
                                        (0260)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0261)    Range_ADC_fIsDataAvailable_M   
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
0577: 7F       RET                      (0263)    ret
0578: 62 D0 00 MOV   REG[0xD0],0x0      
057B: 55 04 00 MOV   [0x4],0x0          
057E: 58 00    MOV   X,[0x0]            
0580: 51 01    MOV   A,[0x1]            
0582: 3C 04 00 CMP   [0x4],0x0          
0585: BF F5    JNZ   0x057B             
                                        (0264) .ENDSECTION
                                        (0265) 
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME:  Range_ADC_iClearFlagGetData
                                        (0270) ;                  Range_ADC_wClearFlagGetData
                                        (0271) ;
                                        (0272) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0273) ;                  Flag is checked after trandfer to insure valid data.
                                        (0274) ;                  available. Also clears the DATA_READY flag. 
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  ARGUMENTS:    None.
                                        (0277) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;          
                                        (0285) ;    Currently only the page pointer registers listed below are modified: 
                                        (0286) ;          CUR_PP
                                        (0287) ;
                                        (0288)  Range_ADC_iClearFlagGetData:
                                        (0289) _Range_ADC_iClearFlagGetData:
                                        (0290)  Range_ADC_wClearFlagGetData:
                                        (0291) _Range_ADC_wClearFlagGetData:
                                        (0292)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0293)    Range_ADC_iClearFlagGetData_M   
                                        (0294)    RAM_EPILOGUE RAM_USE_CLASS_4
0587: 7F       RET                      (0295)    ret
0588: 62 D0 00 MOV   REG[0xD0],0x0      
058B: 55 04 00 MOV   [0x4],0x0          
058E: 51 01    MOV   A,[0x1]            
                                        (0296) .ENDSECTION
                                        (0297) 
                                        (0298) 
                                        (0299) .SECTION
                                        (0300) ;-----------------------------------------------------------------------------
                                        (0301) ;  FUNCTION NAME:  Range_ADC_cClearFlagGetData
                                        (0302) ;                  Range_ADC_bClearFlagGetData
                                        (0303) ;
                                        (0304) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315) ;    Currently only the page pointer registers listed below are modified: 
                                        (0316) ;          CUR_PP
                                        (0317) ;
                                        (0318)  Range_ADC_cClearFlagGetData:
                                        (0319) _Range_ADC_cClearFlagGetData:
                                        (0320)  Range_ADC_bClearFlagGetData:
                                        (0321) _Range_ADC_bClearFlagGetData:
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0323)    Range_ADC_bClearFlagGetData_M     
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0590: 7F       RET                      (0325)    ret
0591: 62 D0 00 MOV   REG[0xD0],0x0      
0594: 58 00    MOV   X,[0x0]            
0596: 51 01    MOV   A,[0x1]            
                                        (0326) .ENDSECTION
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME:  Range_ADC_iGetData
                                        (0330) ;				   Range_ADC_wGetData
                                        (0331) ;
                                        (0332) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0333) ;                   available.
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;  ARGUMENTS:    None.
                                        (0336) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0337) ;  SIDE EFFECTS:
                                        (0338) ;    The A and X registers may be modified by this or future implementations
                                        (0339) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0342) ;    functions.
                                        (0343) ;          
                                        (0344) ;    Currently only the page pointer registers listed below are modified: 
                                        (0345) ;          CUR_PP
                                        (0346) ;
                                        (0347)  Range_ADC_iGetData:
                                        (0348) _Range_ADC_iGetData:
                                        (0349)  Range_ADC_wGetData:
                                        (0350) _Range_ADC_wGetData:
                                        (0351)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0352)    Range_ADC_wGetData_M          
                                        (0353)    RAM_EPILOGUE RAM_USE_CLASS_4
0598: 7F       RET                      (0354)    ret
0599: 62 D0 00 MOV   REG[0xD0],0x0      
059C: 51 01    MOV   A,[0x1]            
                                        (0355) .ENDSECTION
                                        (0356) .SECTION
                                        (0357) ;-----------------------------------------------------------------------------
                                        (0358) ;  FUNCTION NAME:  Range_ADC_bGetData
                                        (0359) ;                  Range_ADC_cGetData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0362) ;                   available.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  ARGUMENTS:    None.
                                        (0365) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0366) ;  SIDE EFFECTS:
                                        (0367) ;    The A and X registers may be modified by this or future implementations
                                        (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0371) ;    functions.
                                        (0372) ;          
                                        (0373) ;    Currently only the page pointer registers listed below are modified: 
                                        (0374) ;          CUR_PP
                                        (0375) ;
                                        (0376)  Range_ADC_bGetData:
                                        (0377) _Range_ADC_bGetData:
                                        (0378)  Range_ADC_cGetData:
                                        (0379) _Range_ADC_cGetData:
                                        (0380)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0381)    Range_ADC_cGetData_M        
                                        (0382)    RAM_EPILOGUE RAM_USE_CLASS_4
059E: 7F       RET                      (0383)    ret
059F: 62 D0 00 MOV   REG[0xD0],0x0      
05A2: 51 04    MOV   A,[0x4]            
05A4: 55 04 00 MOV   [0x4],0x0          
                                        (0384) .ENDSECTION
                                        (0385) 
                                        (0386) 
                                        (0387) .SECTION
                                        (0388) ;-----------------------------------------------------------------------------
                                        (0389) ;  FUNCTION NAME: Range_ADC_fClearFlag
                                        (0390) ;
                                        (0391) ;  DESCRIPTION: Clears the data ready flag.
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;  ARGUMENTS:    None.
                                        (0394) ;  RETURNS:      Nothing.
                                        (0395) ;  SIDE EFFECTS: 
                                        (0396) ;    The DATA_READY flag is cleared.
                                        (0397) ;    
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;          
                                        (0404) ;    Currently only the page pointer registers listed below are modified: 
                                        (0405) ;          CUR_PP
                                        (0406) ;
                                        (0407)  Range_ADC_fClearFlag:
                                        (0408) _Range_ADC_fClearFlag:
                                        (0409)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0410)    Range_ADC_fClearFlag_M    
                                        (0411)    RAM_EPILOGUE RAM_USE_CLASS_4
05A7: 7F       RET                      (0412)    ret
05A8: 60 42    MOV   REG[0x42],A        
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) 
                                        (0416) .SECTION
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;  FUNCTION NAME: Range_ADC_WritePulseWidth
                                        (0419) ;
                                        (0420) ;  DESCRIPTION:
                                        (0421) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;
                                        (0424) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0425) ;  RETURNS:   Nothing
                                        (0426) ;  SIDE EFFECTS:
                                        (0427) ;    The A and X registers may be modified by this or future implementations
                                        (0428) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0429) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0430) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0431) ;    functions.
                                        (0432) ;
                                        (0433)  Range_ADC_WritePulseWidth:
                                        (0434) _Range_ADC_WritePulseWidth:
                                        (0435)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0436)    Range_ADC_WritePulseWidth_M  
                                        (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
05AA: 7F       RET                      (0438)    ret
                                        (0439) .ENDSECTION
                                        (0440) 
                                        (0441) ; End of File Range_ADC.asm
FILE: lib\i2csint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CsINT.asm
                                        (0004) ;;  Version: 2.00, Updated on 2013/5/19 at 10:43:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CFXM (Slave) Interrupt Service Routine
                                        (0008) ;;  
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "I2Cs.inc"
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) 
                                        (0019) 
                                        (0020) ;-----------------------------------------------
                                        (0021) ;  Global Symbols
                                        (0022) ;-----------------------------------------------
                                        (0023) 
                                        (0024) export    I2Cs_varPage      
                                        (0025) export   _I2Cs_varPage      
                                        (0026) 
                                        (0027) export    I2Cs_bState  
                                        (0028) export   _I2Cs_bState
                                        (0029) 
                                        (0030) export    I2Cs_bRAM_RWoffset
                                        (0031) export   _I2Cs_bRAM_RWoffset
                                        (0032) 
                                        (0033) export    I2Cs_bRAM_RWcntr
                                        (0034) export   _I2Cs_bRAM_RWcntr
                                        (0035) 
                                        (0036) export   _I2Cs_pRAM_Buf_Addr_LSB
                                        (0037) export    I2Cs_pRAM_Buf_Addr_LSB
                                        (0038) 
                                        (0039) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0040) export   _I2Cs_pRAM_Buf_Addr_MSB
                                        (0041) export    I2Cs_pRAM_Buf_Addr_MSB
                                        (0042) ENDIF
                                        (0043) 
                                        (0044) export   _I2Cs_bRAM_Buf_Size                                
                                        (0045) export    I2Cs_bRAM_Buf_Size    
                                        (0046) 
                                        (0047) export   _I2Cs_bRAM_Buf_WSize               
                                        (0048) export    I2Cs_bRAM_Buf_WSize  
                                        (0049) 
                                        (0050) IF (I2Cs_ROM_ENABLE)
                                        (0051) export    I2Cs_bROM_RWoffset
                                        (0052) export   _I2Cs_bROM_RWoffset
                                        (0053) 
                                        (0054) export    I2Cs_bROM_RWcntr   
                                        (0055) export   _I2Cs_bROM_RWcntr   
                                        (0056) 
                                        (0057) export   _I2Cs_pROM_Buf_Addr_LSB
                                        (0058) export    I2Cs_pROM_Buf_Addr_LSB
                                        (0059) export   _I2Cs_pROM_Buf_Addr_MSB
                                        (0060) export    I2Cs_pROM_Buf_Addr_MSB
                                        (0061) 
                                        (0062) export   _I2Cs_bROM_Buf_Size                           
                                        (0063) export    I2Cs_bROM_Buf_Size
                                        (0064) 
                                        (0065) ENDIF
                                        (0066) 
                                        (0067) export    I2Cs_bBusy_Flag  
                                        (0068) export   _I2Cs_bBusy_Flag
                                        (0069) 
                                        (0070) AREA InterruptRAM (RAM, REL, CON)
                                        (0071) 
                                        (0072) ;-----------------------------------------------
                                        (0073) ; Variable Allocation
                                        (0074) ;-----------------------------------------------
                                        (0075) 
                                        (0076) 
                                        (0077) ;; Exported variables
                                        (0078)  _I2Cs_varPage:                                    ; This points to the variable page
                                        (0079)   I2Cs_varPage:          
                                        (0080) 
                                        (0081)  _I2Cs_bState:
                                        (0082)   I2Cs_bState:                               blk 1
                                        (0083) 
                                        (0084) ;; RAM space variables
                                        (0085)  _I2Cs_bRAM_RWoffset:                              ; RAM address counter.  This is reset each time
                                        (0086)   I2Cs_bRAM_RWoffset:                        blk 1 ; a read or write is initiated.
                                        (0087) 
                                        (0088)  _I2Cs_bRAM_RWcntr:                                ; RAM Read/Write counter.  Keeps track of offset 
                                        (0089)   I2Cs_bRAM_RWcntr:                          blk 1 ; during a read or write operation.  Reset to
                                        (0090)                                                       ; _bRAM_RWoffset at start of R/W command.
                                        (0091) 
                                        (0092) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0093)  _I2Cs_pRAM_Buf_Addr_MSB:                          ; Base address (MSB) to RAM buffer.  
                                        (0094)   I2Cs_pRAM_Buf_Addr_MSB:                    blk 1 ; 
                                        (0095) ENDIF
                                        (0096) 
                                        (0097)  _I2Cs_pRAM_Buf_Addr_LSB:                          ; Base address (LSB) to RAM buffer.  
                                        (0098)   I2Cs_pRAM_Buf_Addr_LSB:                    blk 1 ; 
                                        (0099) 
                                        (0100)  _I2Cs_bRAM_Buf_Size:                              ; Size of RAM buffer.   
                                        (0101)   I2Cs_bRAM_Buf_Size:                        blk 1 ; 
                                        (0102) 
                                        (0103)  _I2Cs_bRAM_Buf_WSize:                             ; Portion of the RAM buffer size that is writable.
                                        (0104)   I2Cs_bRAM_Buf_WSize:                       blk 1 ; 
                                        (0105) 
                                        (0106) ;; ROM space variables
                                        (0107) IF (I2Cs_ROM_ENABLE)
                                        (0108)  _I2Cs_bROM_RWoffset:                              ; ROM address counter.  This is reset each time
                                        (0109)   I2Cs_bROM_RWoffset:                        blk 1 ; a read is initiated
                                        (0110) 
                                        (0111)  _I2Cs_bROM_RWcntr:                                ; ROM read counter. Keeps track of offset 
                                        (0112)   I2Cs_bROM_RWcntr:                          blk 1 ; during a read operation.  Reset to
                                        (0113)                                                       ; _bRAM_RWoffset at start of command.
                                        (0114) 
                                        (0115)  _I2Cs_pROM_Buf_Addr_MSB:                          ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0116)   I2Cs_pROM_Buf_Addr_MSB:                    blk 1 ; counter is reset each time a read is initiated.
                                        (0117) 
                                        (0118)  _I2Cs_pROM_Buf_Addr_LSB:                          ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0119)   I2Cs_pROM_Buf_Addr_LSB:                    blk 1 ; counter is reset each time a read is initiated.
                                        (0120) 
                                        (0121)  _I2Cs_bROM_Buf_Size:                              ; Size of RAM buffer.                            
                                        (0122)   I2Cs_bROM_Buf_Size:                        blk 1 ; 
                                        (0123) 
                                        (0124) ENDIF
                                        (0125) 
                                        (0126) IF (I2Cs_AUTO_ADDR_CHECK^1)
                                        (0127) IF (I2Cs_DYNAMIC_ADDR) 
                                        (0128) 
                                        (0129) export    I2Cs_bAddr
                                        (0130) export   _I2Cs_bAddr 
                                        (0131) 
                                        (0132)  _I2Cs_bAddr:
                                        (0133)   I2Cs_bAddr:                                blk 1
                                        (0134) ENDIF
                                        (0135) ENDIF
                                        (0136) 
                                        (0137)  _I2Cs_bBusy_Flag:
                                        (0138)   I2Cs_bBusy_Flag:                           blk 1
                                        (0139) 
                                        (0140) ;-----------------------------------------------
                                        (0141) ;  EQUATES and TABLES
                                        (0142) ;-----------------------------------------------
                                        (0143) 
                                        (0144) ;; Bit definitions for I2Cs_bState
                                        (0145) STATE_IDLE:         equ  0x00      ; Wait for Correct Address
                                        (0146) STATE_WR_RAM_ADDR:  equ  0x02      ; Wait for Secondary address on write
                                        (0147) STATE_WR_RAM:       equ  0x04      ; Write RAM Data
                                        (0148) STATE_RD_RAM:       equ  0x06      ; Read RAM Data
                                        (0149) 
                                        (0150) STATE_WR_ROM_ADDR:  equ  0x08      ; Wait for Secondary address on write
                                        (0151) STATE_RD_ROM:       equ  0x0A      ; Read ROM Data
                                        (0152) 
                                        (0153) STATE_WR_ROM:       equ  0x0C      ; Write ROM (Not supported at this time)
                                        (0154) STATE_RESET:        equ  0x0E      ; Reset state machine
                                        (0155) 
                                        (0156) STATE_MASK:         equ  0x0E
                                        (0157) STATE_MASK2:        equ  0x0F      ; State Mask
                                        (0158) 
                                        (0159) ALT_MODE_FLAG:      equ  0x40      ; Reserved
                                        (0160) 
                                        (0161) 
                                        (0162) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0163) ;---------------------------------------------------
                                        (0164) ; Insert your custom declarations below this banner
                                        (0165) ;---------------------------------------------------
                                        (0166) 
                                        (0167) ;------------------------
                                        (0168) ;  Constant Definitions
                                        (0169) ;------------------------
                                        (0170) 
                                        (0171) 
                                        (0172) ;------------------------
                                        (0173) ; Variable Allocation
                                        (0174) ;------------------------
                                        (0175) 
                                        (0176) 
                                        (0177) ;---------------------------------------------------
                                        (0178) ; Insert your custom declarations above this banner
                                        (0179) ;---------------------------------------------------
                                        (0180) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0181) 
                                        (0182) 
                                        (0183) 
                                        (0184) 
                                        (0185) AREA UserModules (ROM, REL, CON)
                                        (0186) 
                                        (0187) export _I2Cs_ISR
                                        (0188) ;;****************************************************
                                        (0189) ;; I2C_ISR  main entry point from vector 60h
                                        (0190) ;;
                                        (0191) ;;****************************************************
                                        (0192) 
                                        (0193)  I2Cs_ISR:
                                        (0194) _I2Cs_ISR:
                                        (0195) 
05AB: 08       PUSH  A                  (0196)     push A
05AC: 10       PUSH  X                  (0197)     push X
05AD: 70 3F    AND   F,0x3F             
05AF: 71 80    OR    F,0x80             
05B1: 5D D3    MOV   A,REG[0xD3]        
05B3: 08       PUSH  A                  
05B4: 5D D0    MOV   A,REG[0xD0]        
05B6: 08       PUSH  A                  
05B7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0198)     
                                        (0199)     ;@PSoC_UserCode_ISR_START@ (Do not change this line.)
                                        (0200)     ;---------------------------------------------------
                                        (0201)     ; Insert your custom code below this banner
                                        (0202)     ;---------------------------------------------------
                                        (0203) 
                                        (0204)     ;---------------------------------------------------
                                        (0205)     ; Insert your custom code above this banner
                                        (0206)     ;---------------------------------------------------
                                        (0207)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0208) 
                                        (0209) ;; The folling conditional code is only valid when using the
                                        (0210) ;; large memory model.
                                        (0211) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0212)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_2              ; Set Page Mode
                                        (0213)    REG_PRESERVE IDX_PP                             ; Save Index Page Pointer
                                        (0214)    REG_PRESERVE CUR_PP                             ; Save Current Page Pointer
                                        (0215)    RAM_SETPAGE_CUR  >I2Cs_varPage      ; Set the current page mode Pointer
05BA: 51 0B    MOV   A,[0xB]            (0216)    mov   A, [I2Cs_pRAM_Buf_Addr_MSB]   ; Set Index page mode pointer
05BC: 60 D3    MOV   REG[0xD3],A        
                                        (0217)    RAM_SETPAGE_IDX A
                                        (0218) ENDIF
                                        (0219) 
05BE: 2E 08 80 OR    [0x8],0x80         (0220)     or   [I2Cs_bState],I2Cs_ANY_ACTIVITY                             ; Set Activity flag
05C1: 49 D7 08 TST   REG[0xD7],0x8      (0221)     tst  reg[I2Cs_SCR_REG],I2Cs_SCR_ADDRESS                          ; Check for address
05C4: A0 09    JZ    0x05CE             (0222)     jz   .I2C_CHECK_STOP                                             ; Go to check for Stop condition if no Address
05C6: 26 08 F0 AND   [0x8],0xF0         (0223)     and  [I2Cs_bState],~STATE_MASK2                                  ; Clear State bits.                       
05C9: 2E 08 00 OR    [0x8],0x0          (0224)     or   [I2Cs_bState],STATE_IDLE                                    ; Address flag set, change to IDLE state
05CC: 80 08    JMP   0x05D5             (0225)     jmp  .I2C_DO_STATE_MACHINE
                                        (0226) .I2C_CHECK_STOP:
                                        (0227)     ; Check for Stop condition here.  If a stop condition
                                        (0228)     ; exists, reset state machine to idle.
05CE: 49 D7 20 TST   REG[0xD7],0x20     (0229)     tst reg[I2Cs_SCR_REG],I2Cs_SCR_STOP_STATUS                       ; Check for Stop condition
05D1: A0 03    JZ    0x05D5             (0230)     jz .I2C_DO_STATE_MACHINE                                            ; No Stop condition - do I2C state mashine
                                        (0231)     ; Following line was commented due to CDT#60202.
                                        (0232)     ; The stop bit is cleared by SetI2Cs_SCR macro, so the functionality related to I2Cs_bBusy_Flag is preserved.
                                        (0233)     ; and reg[I2Cs_SCR_REG],~I2Cs_SCR_STOP_STATUS                    ; Clear Stop bit
05D3: 80 A8    JMP   0x067C             (0234)     jmp  I2C_STATE_RESET
                                        (0235) .I2C_DO_STATE_MACHINE:
05D5: 51 08    MOV   A,[0x8]            (0236)     mov  A,[I2Cs_bState]    ; Get State
05D7: 21 0E    AND   A,0xE              (0237)     and  A,STATE_MASK                   ; Mask off invalid states
05D9: E0 01    JACC  0x05DB             (0238)     jacc I2C_STATE_JUMP_TABLE
                                        (0239) 
                                        (0240) I2C_STATE_JUMP_TABLE:
05DB: 80 11    JMP   0x05ED             (0241)     jmp  I2C_STATE_IDLE                 ; Idle state
05DD: 80 67    JMP   0x0645             (0242)     jmp  I2C_STATE_WR_RAM_ADDR              ; Wait for Address write state
05DF: 80 79    JMP   0x0659             (0243)     jmp  I2C_STATE_WR_RAM               ; 
05E1: 80 47    JMP   0x0629             (0244)     jmp  I2C_STATE_RD_RAM
                                        (0245) IF (I2Cs_ROM_ENABLE)        ; Only valid if ROM enabled
                                        (0246)     jmp  I2C_STATE_WR_ROM_ADDR
                                        (0247)     jmp  I2C_STATE_RD_ROM
                                        (0248)     jmp  I2C_STATE_WR_ROM
                                        (0249) ELSE
05E3: 80 98    JMP   0x067C             (0250)     jmp  I2C_STATE_RESET
05E5: 80 96    JMP   0x067C             (0251)     jmp  I2C_STATE_RESET
05E7: 80 94    JMP   0x067C             (0252)     jmp  I2C_STATE_RESET
                                        (0253) ENDIF
05E9: 80 92    JMP   0x067C             (0254)     jmp  I2C_STATE_RESET
                                        (0255) 
05EB: 80 99    JMP   0x0685             (0256)     jmp  I2Cs_ISR_END
                                        (0257) 
                                        (0258) 
                                        (0259)     ;            *** I2C Idle state ***
                                        (0260)     ;
                                        (0261)     ;   Sit idle until a start with address is issued.
                                        (0262)     ;   Check to see if there is an address match
                                        (0263)     ;     If address match, ACK the bus and determine next state
                                        (0264)     ;     Else NAK the transfer and return to idle state.
                                        (0265)     ;   Also check stop for condition.IF (I2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0266)     ;
                                        (0267) I2C_STATE_IDLE:                 ; Idle state
                                        (0268) 
                                        (0269) IF (I2Cs_AUTO_ADDR_CHECK^1)   ;; for CY8C28X45 chip: skip address comparison and NACK sending stage-hardware will do this for us  if AutoAddressCompare feature is enabled.
                                        (0270)                                           ;; The code in this pre-compiler directive will be executed for all chips except CY8C28X45.
                                        (0271)  IF (I2Cs_CY8C22x45)
                                        (0272)    M8C_SetBank1
                                        (0273)    tst   reg[I2Cs_ADDR_REG], I2Cs_HW_ADDR_EN
                                        (0274)    jnz   .HwAddrRecEnabled
                                        (0275)    M8C_SetBank0
                                        (0276)  ENDIF										  
                                        (0277) IF (I2Cs_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0278)     mov  A,reg[I2Cs_DR_REG]                                          ; Get transmitted address
                                        (0279)     and  A,I2Cs_ADDR_MASK                                            ; Mask off alt address bit and R/W bit
                                        (0280)     cmp  A,[I2Cs_bAddr]                                              ; Check for proper Address
                                        (0281)     jz   .CHK_ADDR_MODE 
                                        (0282)     SetI2Cs_SCR ( I2Cs_SCR_NAK )                                     ; NAK Address 
                                        (0283)     jmp  I2Cs_ISR_END                                                ; Not valid Address, leave
                                        (0284) 
                                        (0285) ELSE    ;; STATIC ADDRESS
05ED: 5D D8    MOV   A,REG[0xD8]        (0286)     mov  A,reg[I2Cs_DR_REG]                                          ; Get transmitted address
05EF: 21 FE    AND   A,0xFE             (0287)     and  A,I2Cs_ADDR_MASK                                            ; Mask off alt address bit and R/W bit
05F1: 39 A4    CMP   A,0xA4             (0288)     cmp  A,I2Cs_SLAVE_ADDR                                           ; Check for proper Address
05F3: A0 06    JZ    0x05FA             (0289)     jz   .CHK_ADDR_MODE 
05F5: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0290)     SetI2Cs_SCR ( I2Cs_SCR_NAK )                                     ; NAK Address 
05F8: 80 8C    JMP   0x0685             (0291)     jmp  I2Cs_ISR_END                                                ; Not valid Address, leave
                                        (0292) ENDIF
                                        (0293)  IF (I2Cs_CY8C22x45)
                                        (0294) .HwAddrRecEnabled:
                                        (0295)    M8C_SetBank0
                                        (0296)  ENDIF
                                        (0297) ENDIF
                                        (0298) 
                                        (0299) .CHK_ADDR_MODE:   ; A proper address has been detected, now determine what mode, R/W alt_addr?? 
                                        (0300) IF (I2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0301)     tst  reg[I2Cs_DR_REG],I2Cs_ALT_ADDR_BIT                          ; Check for Alt address
                                        (0302)     jnz  SERVICE_ROM_ADDR
                                        (0303) ENDIF
                                        (0304) 
                                        (0305) .STANDARD_ADDR:
05FA: 49 D8 01 TST   REG[0xD8],0x1      (0306)     tst  reg[I2Cs_DR_REG],I2Cs_RD_FLAG                               ; Check for a Read operation
05FD: B0 0F    JNZ   0x060D             (0307)     jnz  .PREPARE_FOR_RAM_READ
                                        (0308) 
05FF: 55 0F 02 MOV   [0xF],0x2          (0309)     mov [I2Cs_bBusy_Flag], I2Cs_I2C_BUSY_RAM_WRITE                   ; Write transaction in process - set Busy flag to WRITE
                                        (0310) 
                                        (0311)     ; Prepare for RAM Write Address operation
0602: 26 08 F0 AND   [0x8],0xF0         (0312)     and  [I2Cs_bState],~STATE_MASK2                                  ; Clear State bit.                       
0605: 2E 08 02 OR    [0x8],0x2          (0313)     or   [I2Cs_bState],STATE_WR_RAM_ADDR                             ; Set state machine to do RAM Write
0608: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0314)     SetI2Cs_SCR ( I2Cs_SCR_ACK )                                     ; ACK Address 
060B: 80 79    JMP   0x0685             (0315)     jmp  I2Cs_ISR_END                                     ; Base address to RAM buffer.  
                                        (0316) 
                                        (0317) .PREPARE_FOR_RAM_READ:
060D: 55 0F 01 MOV   [0xF],0x1          (0318)     mov [I2Cs_bBusy_Flag], I2Cs_I2C_BUSY_RAM_READ                    ; Possible read transaction in process - set Busy flag to READ
                                        (0319) 
0610: 26 08 F0 AND   [0x8],0xF0         (0320)     and  [I2Cs_bState],~STATE_MASK2                                  ; Clear State bit.                       
0613: 2E 08 06 OR    [0x8],0x6          (0321)     or   [I2Cs_bState],STATE_RD_RAM                                  ; Set state machine to do RAM Read 
0616: 5F 0A 09 MOV   [0xA],[0x9]        (0322)     mov  [I2Cs_bRAM_RWcntr],[I2Cs_bRAM_RWoffset]                     ; Reset address counter to start of Offset
0619: 51 0C    MOV   A,[0xC]            (0323)     mov  A,[I2Cs_pRAM_Buf_Addr_LSB]                                  ; Get base address
061B: 02 0A    ADD   A,[0xA]            (0324)     add  A,[I2Cs_bRAM_RWcntr]                                        ; Set Offset and add to base address      
061D: 5C       MOV   X,A                (0325)     mov  X,A                                                         ; Put offset in X
061E: 52 00    MOV   A,[X+0]            (0326)     mov  A,[X]                                                       ; Get first byte to transmit
0620: 60 D8    MOV   REG[0xD8],A        (0327)     mov  reg[I2Cs_DR_REG],A                               ; Base address to RAM buffer.  
0622: 76 0A    INC   [0xA]              (0328)     inc  [I2Cs_bRAM_RWcntr]                                          ; Increment RAM buffer counter to next location.
0624: 62 D7 14 MOV   REG[0xD7],0x14     
                                        (0329) 
                                        (0330)                                                                      ; ACK command and transmit first byte.
                                        (0331)     SetI2Cs_SCR (I2Cs_SCR_ACK|I2Cs_SCR_TRANSMIT)   
0627: 80 5D    JMP   0x0685             (0332)     jmp  I2Cs_ISR_END
                                        (0333) 
                                        (0334)     ;            *** I2C Read RAM state ***
                                        (0335)     ;
                                        (0336) I2C_STATE_RD_RAM:
                                        (0337)     ;@PSoC_UserCode_RAM_RD@ (Do not change this line.)
                                        (0338)     ;---------------------------------------------------
                                        (0339)     ; Insert your custom code below this banner
                                        (0340)     ;---------------------------------------------------
                                        (0341)     
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ; Insert your custom code above this banner
                                        (0344)     ;---------------------------------------------------
                                        (0345)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0346)     
0629: 51 0D    MOV   A,[0xD]            (0347)     mov  A,[I2Cs_bRAM_Buf_Size]
062B: 78       DEC   A                  (0348)     dec  A
062C: 3A 0A    CMP   A,[0xA]            (0349)     cmp  A,[I2Cs_bRAM_RWcntr]                                        ; Check to see if out of range.
062E: C0 0F    JC    0x063E             (0350)     jc   .I2C_TRANSMIT_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0351) 
0630: 51 0C    MOV   A,[0xC]            (0352)     mov  A,[I2Cs_pRAM_Buf_Addr_LSB]                                  ; Get base address
0632: 02 0A    ADD   A,[0xA]            (0353)     add  A,[I2Cs_bRAM_RWcntr]                                        ; Set Offset and add to base address      
0634: 5C       MOV   X,A                (0354)     mov  X,A                                                         ; Put offset in X
0635: 52 00    MOV   A,[X+0]            (0355)     mov  A,[X]                                                       ; Get first byte to transmit
0637: 60 D8    MOV   REG[0xD8],A        (0356)     mov  reg[I2Cs_DR_REG],A                                          ; Write data to transmit register
0639: 76 0A    INC   [0xA]              (0357)     inc  [I2Cs_bRAM_RWcntr]                                          ; Increment RAM buffer counter to next location.
063B: 2E 08 20 OR    [0x8],0x20         (0358)     or   [I2Cs_bState],I2Cs_READ_ACTIVITY                            ; Set Read Activity flag
                                        (0359) 
                                        (0360) 
                                        (0361) .I2C_TRANSMIT_DATA:     
063E: 60 D8    MOV   REG[0xD8],A        (0362)     mov  reg[I2Cs_DR_REG],A                                          ; Write data to transmit register
0640: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0363)     SetI2Cs_SCR ( I2Cs_SCR_TRANSMIT )                                ; ACK command and transmit first byte. 
0643: 80 41    JMP   0x0685             (0364)     jmp  I2Cs_ISR_END
                                        (0365) 
                                        (0366) 
                                        (0367)     ;            *** I2C Write RAM Address state ***
                                        (0368)     ;
                                        (0369)     ;  During this state, the RAM address offset is set.
                                        (0370) I2C_STATE_WR_RAM_ADDR:              ; Wait for Address write state
0645: 5D D8    MOV   A,REG[0xD8]        (0371)     mov  A,reg[I2Cs_DR_REG]                                          ; Get transmitted Address offset
0647: 3A 0D    CMP   A,[0xD]            (0372)     cmp  A,[I2Cs_bRAM_Buf_Size]                                      ; Check if out of range.
0649: D0 2D    JNC   0x0677             (0373)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
064B: A0 2B    JZ    0x0677             (0374)     jz   I2C_NAK_DATA
                                        (0375) 
                                        (0376)     ; Address in range
064D: 53 0A    MOV   [0xA],A            (0377)     mov  [I2Cs_bRAM_RWcntr],A                                        ; Reset address counter with new value
064F: 53 09    MOV   [0x9],A            (0378)     mov  [I2Cs_bRAM_RWoffset],A                                      ; Set offset with new value.
0651: 26 08 F0 AND   [0x8],0xF0         (0379)     and  [I2Cs_bState],~STATE_MASK2                                  ; Clear State bit.                       
0654: 2E 08 04 OR    [0x8],0x4          (0380)     or   [I2Cs_bState],STATE_WR_RAM                                  ; Set state machine to do RAM Write
0657: 80 1A    JMP   0x0672             (0381)     jmp  I2C_ACK_DATA                         ; ACK the data
                                        (0382) 
                                        (0383) 
                                        (0384)     ;            *** I2C Write RAM state
                                        (0385) I2C_STATE_WR_RAM:  
                                        (0386)     ;@PSoC_UserCode_RAM_WR@ (Do not change this line.)
                                        (0387)     ;---------------------------------------------------
                                        (0388)     ; Insert your custom code below this banner
                                        (0389)     ;---------------------------------------------------
                                        (0390)     
                                        (0391)     ;---------------------------------------------------
                                        (0392)     ; Insert your custom code above this banner
                                        (0393)     ;---------------------------------------------------
                                        (0394)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0395)     
0659: 51 0E    MOV   A,[0xE]            (0396)     mov  A,[I2Cs_bRAM_Buf_WSize]                                     ; Get buffer size to make sure we
065B: A0 1B    JZ    0x0677             (0397)     jz   I2C_NAK_DATA                                                ; If RAM WSize is zero, do not allow write.
065D: 78       DEC   A                  (0398)     dec  A                                                           ; are in a valid area.
065E: 3A 0A    CMP   A,[0xA]            (0399)     cmp  A,[I2Cs_bRAM_RWcntr]                                        ; Check to see if out of range.
0660: C0 16    JC    0x0677             (0400)     jc   I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0401) 
0662: 51 0C    MOV   A,[0xC]            (0402)     mov  A,[I2Cs_pRAM_Buf_Addr_LSB]                                  ; Get base address
0664: 02 0A    ADD   A,[0xA]            (0403)     add  A,[I2Cs_bRAM_RWcntr]                                        ; Set Offset and add to base address      
0666: 5C       MOV   X,A                (0404)     mov  X,A                                                         ; Put offset in X
                                        (0405) 
0667: 5D D8    MOV   A,REG[0xD8]        (0406)     mov  A,reg[I2Cs_DR_REG]                                          ; Read data to be written
0669: 54 00    MOV   [X+0],A            (0407)     mov  [X],A                                                       ; Store data in Buffer
066B: 2E 08 10 OR    [0x8],0x10         (0408)     or   [I2Cs_bState],I2Cs_WRITE_ACTIVITY                           ; Set Write Activity flag
066E: 76 0A    INC   [0xA]              (0409)     inc  [I2Cs_bRAM_RWcntr]                                          ; Advance pointer to next location
0670: 80 01    JMP   0x0672             (0410)     jmp  I2C_ACK_DATA                         ; ACK the data
0672: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0411) 
                                        (0412)     
                                        (0413)     
                                        (0414) IF (I2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0415) 
                                        (0416) SERVICE_ROM_ADDR:  ; At this time only ROM Read is supported.  
                                        (0417)     tst  reg[I2Cs_DR_REG],I2Cs_RD_FLAG                               ; Check for a Read operation
                                        (0418)     jnz  PREPARE_FOR_ROM_READ
                                        (0419) 
                                        (0420)     mov [I2Cs_bBusy_Flag], I2Cs_I2C_BUSY_ROM_WRITE                   ; Write transaction in process - set Busy flag to WRITE
                                        (0421)     
                                        (0422)     and  [I2Cs_bState],~STATE_MASK2                                  ; Clear State bit.                       
                                        (0423)     or   [I2Cs_bState],STATE_WR_ROM_ADDR                             ; Set state machine to do ROM ADDR Write
                                        (0424)     SetI2Cs_SCR ( I2Cs_SCR_ACK )                                     ; ACK Address 
                                        (0425)     jmp  I2Cs_ISR_END                                    ; Base address to RAM buffer.  
                                        (0426) 
                                        (0427)     ; Prepare for Write ROM Address.              
                                        (0428) I2C_STATE_WR_ROM_ADDR:
                                        (0429)     mov  A,reg[I2Cs_DR_REG]                                          ; Get transmitted Address offset
                                        (0430)     cmp  A,[I2Cs_bROM_Buf_Size]                                      ; Check if out of range.
                                        (0431)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0432)     jz   I2C_NAK_DATA
                                        (0433) 
                                        (0434)     mov  [I2Cs_bROM_RWcntr],A                                        ; Reset address counter with new value
                                        (0435)     mov  [I2Cs_bROM_RWoffset],A                                      ; Set offset with new value.
                                        (0436)     and  [I2Cs_bState],~STATE_MASK2                                  ; Clear State bit.                       
                                        (0437)     or   [I2Cs_bState],STATE_WR_ROM                                  ; Set state machine to do ROM Write
                                        (0438)     jmp  I2C_ACK_DATA
                                        (0439) 
                                        (0440) I2C_STATE_WR_ROM:  // Flash command interpreter
                                        (0441)    ;@PSoC_UserCode_ROM_WR@ (Do not change this line.)
                                        (0442)    ;---------------------------------------------------
                                        (0443)    ; Insert your custom code below this banner
                                        (0444)    ;---------------------------------------------------
                                        (0445) 
                                        (0446)    ;---------------------------------------------------
                                        (0447)    ; Insert your custom code above this banner
                                        (0448)    ;---------------------------------------------------
                                        (0449)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0450) 
                                        (0451)     jnc  I2C_NAK_DATA                                                ; Write to ROM not supported.
                                        (0452) 
                                        (0453) PREPARE_FOR_ROM_READ:
                                        (0454)     mov [I2Cs_bBusy_Flag], I2Cs_I2C_BUSY_ROM_READ                    ; Possible read transaction in process - set Busy flag to READ
                                        (0455)     
                                        (0456)     and  [I2Cs_bState],~STATE_MASK2                                  ; Clear State bit.                       
                                        (0457)     or   [I2Cs_bState],STATE_RD_ROM                                  ; Set state machine to do ROM Read 
                                        (0458)     mov  [I2Cs_bROM_RWcntr],[I2Cs_bROM_RWoffset]                     ; Reset address counter to start of Offset
                                        (0459)     mov  X,[I2Cs_pROM_Buf_Addr_MSB]                                  ; Get MSB of ROM address in X
                                        (0460)     mov  A,[I2Cs_pROM_Buf_Addr_LSB]                                  ; Get LSB of ROM base address
                                        (0461)     add  A,[I2Cs_bROM_RWcntr]                                        ; Set Offset and add to base address      
                                        (0462)     jnc  .GET_ROM_VALUE
                                        (0463)     inc  X    ; Inc the MSB
                                        (0464) .GET_ROM_VALUE:
                                        (0465)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0466)     romx      ; Get Rom value in A
                                        (0467) 
                                        (0468)     mov  reg[I2Cs_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0469)     inc  [I2Cs_bROM_RWcntr]                                          ; Increment RAM buffer counter to next location.
                                        (0470) 
                                        (0471)                                                                      ; ACK command and transmit first byte.
                                        (0472)     SetI2Cs_SCR  (I2Cs_SCR_ACK|I2Cs_SCR_TRANSMIT)   
                                        (0473)     jmp  I2Cs_ISR_END
                                        (0474) 
                                        (0475) 
                                        (0476) I2C_STATE_RD_ROM:
                                        (0477)     ;@PSoC_UserCode_ROM_RD@ (Do not change this line.)
                                        (0478)     ;---------------------------------------------------
                                        (0479)     ; Insert your custom code below this banner
                                        (0480)     ;---------------------------------------------------
                                        (0481) 
                                        (0482)     ;---------------------------------------------------
                                        (0483)     ; Insert your custom code above this banner
                                        (0484)     ;---------------------------------------------------
                                        (0485)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0486) 
                                        (0487)     mov  A,[I2Cs_bROM_Buf_Size]
                                        (0488)     dec  A
                                        (0489)     cmp  A,[I2Cs_bROM_RWcntr]                                        ; Check to see if out of range.
                                        (0490)     jc   .I2C_TRANSMIT_ROM_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0491) 
                                        (0492)     mov  X,[I2Cs_pROM_Buf_Addr_MSB]                                  ; Get MSB of ROM address in X
                                        (0493)     mov  A,[I2Cs_pROM_Buf_Addr_LSB]                                  ; Get LSB of ROM base address
                                        (0494)     add  A,[I2Cs_bROM_RWcntr]                                        ; Set Offset and add to base address      
                                        (0495)     jnc  .GET_ROM_VALUE
                                        (0496)     inc  X    ; Inc the MSB
                                        (0497) .GET_ROM_VALUE:
                                        (0498)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0499)     romx      ; Get Rom value in A
                                        (0500)     mov  reg[I2Cs_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0501)     inc  [I2Cs_bROM_RWcntr]                                          ; Increment RAM buffer counter to next location.
                                        (0502) 
                                        (0503) .I2C_TRANSMIT_ROM_DATA:     
                                        (0504)     mov  reg[I2Cs_DR_REG],A                                          ; Write data to transmit register
                                        (0505)     SetI2Cs_SCR  (I2Cs_SCR_TRANSMIT)                                 ; ACK command and transmit first byte. 
                                        (0506)     jmp  I2Cs_ISR_END
                                        (0507) 
                                        (0508) ENDIF
                                        (0509) 
                                        (0510) ;; Generic handlers
                                        (0511) 
                                        (0512) I2C_ACK_DATA:
                                        (0513)     SetI2Cs_SCR ( I2Cs_SCR_ACK )                                     ; ACK Data
0675: 80 0F    JMP   0x0685             (0514)     jmp  I2Cs_ISR_END
0677: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0515) 
                                        (0516) I2C_NAK_DATA:   ;; NAK data and return  !!WARNING, NOT SURE IF THIS WILL WORK
                                        (0517)     SetI2Cs_SCR ( I2Cs_SCR_NAK )                                     ;  NAK Data
067A: 80 0A    JMP   0x0685             (0518)     jmp  I2Cs_ISR_END
                                        (0519) 
                                        (0520) I2C_STATE_RESET:
                                        (0521)     ;@PSoC_UserCode_I2C_RST_Start@ (Do not change this line.)
                                        (0522)     ;---------------------------------------------------
                                        (0523)     ; Insert your custom code below this banner
                                        (0524)     ;---------------------------------------------------
                                        (0525) 
                                        (0526)     ;---------------------------------------------------
                                        (0527)     ; Insert your custom code above this banner
                                        (0528)     ;---------------------------------------------------
                                        (0529)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0530) 
067C: 26 08 F0 AND   [0x8],0xF0         (0531)     and  [I2Cs_bState],~STATE_MASK2                                  ; Clear State bit.                       
067F: 2E 08 00 OR    [0x8],0x0          (0532)     or   [I2Cs_bState], STATE_IDLE    ; Reset State
0682: 55 0F 00 MOV   [0xF],0x0          (0533)     mov [I2Cs_bBusy_Flag],I2Cs_I2C_FREE                              ; Clear Busy flag
0685: 18       POP   A                  
0686: 60 D0    MOV   REG[0xD0],A        
0688: 18       POP   A                  
0689: 60 D3    MOV   REG[0xD3],A        
                                        (0534)     ; Reset pointer buffers as well
                                        (0535)     ;@PSoC_UserCode_I2C_RST_End@ (Do not change this line.)
                                        (0536)     ;---------------------------------------------------
                                        (0537)     ; Insert your custom code below this banner
                                        (0538)     ;---------------------------------------------------
                                        (0539) 
                                        (0540)     ;---------------------------------------------------
                                        (0541)     ; Insert your custom code above this banner
                                        (0542)     ;---------------------------------------------------
                                        (0543)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0544) 
                                        (0545) I2Cs_ISR_END:
                                        (0546) 
                                        (0547) ; This conditional code is only used when using the large memory model.
                                        (0548) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0549)    REG_RESTORE CUR_PP           ; Restore Current Page Pointer
                                        (0550)    REG_RESTORE IDX_PP           ; Restore Index Page Pointer
                                        (0551) ENDIF
068B: 20       POP   X                  (0552)     pop  X
068C: 18       POP   A                  (0553)     pop  A
                                        (0554) 
068D: 7E       RETI                     (0555)     reti
                                        (0556) ; end of file I2CsINT.asm
FILE: lib\i2cs.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
068E: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2Cs.asm
0691: 71 10    OR    F,0x10             
                                        (0004) ;;  Version: 2.00, Updated on 2013/5/19 at 10:43:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: EzI2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2Cs.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ; include instance specific register definitions
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) ;-----------------------------------------------
                                        (0032) ;  Global Symbols
                                        (0033) ;-----------------------------------------------
                                        (0034) ;-------------------------------------------------------------------
                                        (0035) ;  Declare the functions global for both assembler and C compiler.
                                        (0036) ;
                                        (0037) ;  Note that there are two names for each API. First name is
                                        (0038) ;  assembler reference. Name with underscore is name refence for
                                        (0039) ;  C compiler.  Calling function in C source code does not require
                                        (0040) ;  the underscore.
                                        (0041) ;-------------------------------------------------------------------
                                        (0042) 
                                        (0043) export    I2Cs_EnableInt
                                        (0044) export   _I2Cs_EnableInt
                                        (0045) export    I2Cs_ResumeInt
                                        (0046) export   _I2Cs_ResumeInt
                                        (0047) export    I2Cs_Start
                                        (0048) export   _I2Cs_Start
                                        (0049) 
                                        (0050) export    I2Cs_DisableInt
                                        (0051) export   _I2Cs_DisableInt
                                        (0052) export    I2Cs_Stop
                                        (0053) export   _I2Cs_Stop
                                        (0054) export    I2Cs_DisableSlave
                                        (0055) export   _I2Cs_DisableSlave
                                        (0056) export    I2Cs_SetRamBuffer
                                        (0057) export   _I2Cs_SetRamBuffer
                                        (0058) export    I2Cs_GetAddr
                                        (0059) export   _I2Cs_GetAddr
                                        (0060) export    I2Cs_GetActivity
                                        (0061) export   _I2Cs_GetActivity
                                        (0062) 
                                        (0063) 
                                        (0064) IF (I2Cs_DYNAMIC_ADDR | I2Cs_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0065) export    I2Cs_SetAddr
                                        (0066) export   _I2Cs_SetAddr
                                        (0067) ENDIF
                                        (0068) 
                                        (0069) IF (I2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0070) export    I2Cs_SetRomBuffer
                                        (0071) export   _I2Cs_SetRomBuffer
                                        (0072) ENDIF
                                        (0073) 
                                        (0074) IF (I2Cs_CY8C22x45)
                                        (0075) export    I2Cs_EnableHWAddrCheck
                                        (0076) export   _I2Cs_EnableHWAddrCheck
                                        (0077) export    I2Cs_DisableHWAddrCheck
                                        (0078) export   _I2Cs_DisableHWAddrCheck
                                        (0079) ENDIF
                                        (0080) 
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL, CON)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: I2Cs_Start
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;   Initialize the I2Cs I2C bus interface.
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;
                                        (0096) ;  RETURNS: none
                                        (0097) ;
                                        (0098) ;  SIDE EFFECTS:
                                        (0099) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0100) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0101) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0102) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0103) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0104) ;          
                                        (0105) ;    Page Pointer Registers Modified: 
                                        (0106) ;          CUR_PP
                                        (0107) ;
                                        (0108) ;  THEORY of OPERATION or PROCEDURE:
                                        (0109) ;
                                        (0110) 
                                        (0111)  I2Cs_Start:
                                        (0112) _I2Cs_Start:
                                        (0113) 
                                        (0114)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0115)    RAM_SETPAGE_CUR >I2Cs_varPage
                                        (0116)    
                                        (0117) IF (I2Cs_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0118) IF (I2Cs_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the I2Cs_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0119)    mov  [I2Cs_bAddr],I2Cs_SLAVE_ADDR
                                        (0120) ENDIF   
                                        (0121) ENDIF
                                        (0122) IF (I2Cs_CY8C22x45)
                                        (0123)    M8C_SetBank1
                                        (0124)    mov   reg[I2Cs_ADDR_REG], (I2Cs_SLAVE_ADDR>>1)
                                        (0125)    M8C_SetBank0
                                        (0126) ENDIF
                                        (0127) 
                                        (0128)    M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
0693: 41 04 FC AND   REG[0x4],0xFC      (0129)    and reg[I2CsSDA_DriveMode_0_ADDR],~(I2CsSDA_MASK|I2CsSCL_MASK)
0696: 43 05 03 OR    REG[0x5],0x3       (0130)    or  reg[I2CsSDA_DriveMode_1_ADDR], (I2CsSDA_MASK|I2CsSCL_MASK)
0699: 70 EF    AND   F,0xEF             
                                        (0131)    M8C_SetBank0
069B: 43 07 03 OR    REG[0x7],0x3       (0132)    or  reg[I2CsSDA_DriveMode_2_ADDR], (I2CsSDA_MASK|I2CsSCL_MASK)
                                        (0133) 
069E: 55 08 00 MOV   [0x8],0x0          (0134)    mov  [I2Cs_bState],0x00    ;; Make sure state machine is initialized
06A1: 55 0F 00 MOV   [0xF],0x0          (0135)    mov [I2Cs_bBusy_Flag],I2Cs_I2C_FREE ;; Clear Busy flag
                                        (0136) 
06A4: 90 29    CALL  _I2Cs_EnableInt    (0137)    call I2Cs_EnableInt
06A6: 90 2E    CALL  0x06D6             (0138)    call I2Cs_EnableSlave
                                        (0139) 
06A8: 40       NOP                      (0140)    nop
06A9: 40       NOP                      (0141)    nop
06AA: 40       NOP                      (0142)    nop
06AB: 40       NOP                      (0143)    nop
06AC: 40       NOP                      (0144)    nop
                                        (0145)    
06AD: 50 00    MOV   A,0x0              (0146)    mov A, 0
06AF: 53 09    MOV   [0x9],A            (0147)    mov [I2Cs_bRAM_RWoffset], A
06B1: 71 10    OR    F,0x10             
                                        (0148) IF (I2Cs_ROM_ENABLE)
                                        (0149)    mov [I2Cs_bROM_RWoffset], A
                                        (0150) ENDIF
                                        (0151)    
                                        (0152)    M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
06B3: 43 04 03 OR    REG[0x4],0x3       (0153)    or reg[I2CsSDA_DriveMode_0_ADDR], (I2CsSDA_MASK|I2CsSCL_MASK)
06B6: 43 05 03 OR    REG[0x5],0x3       (0154)    or reg[I2CsSDA_DriveMode_1_ADDR], (I2CsSDA_MASK|I2CsSCL_MASK)
06B9: 70 EF    AND   F,0xEF             
                                        (0155)    M8C_SetBank0
06BB: 43 07 03 OR    REG[0x7],0x3       (0156)    or reg[I2CsSDA_DriveMode_2_ADDR], (I2CsSDA_MASK|I2CsSCL_MASK)
                                        (0157) 
                                        (0158)    RAM_EPILOGUE RAM_USE_CLASS_4
06BE: 7F       RET                      (0159)    ret
06BF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0160) 
                                        (0161) .ENDSECTION
                                        (0162) 
                                        (0163) IF (I2Cs_DYNAMIC_ADDR | I2Cs_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0164) .SECTION
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;  FUNCTION NAME: I2Cs_SetAddr(BYTE bAddr)
                                        (0167) ;
                                        (0168) ;  DESCRIPTION:
                                        (0169) ;   Set the I2C slave address for the I2Cs I2C bus interface.
                                        (0170) ;
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;
                                        (0173) ;  ARGUMENTS:
                                        (0174) ;      A =>  Slave address
                                        (0175) ;
                                        (0176) ;  RETURNS: none
                                        (0177) ;
                                        (0178) ;  SIDE EFFECTS;    
                                        (0179) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0180) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0181) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0182) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0183) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0184) ;          
                                        (0185) ;    Page Pointer Registers Modified: 
                                        (0186) ;          CUR_PP
                                        (0187) ;
                                        (0188) ;  THEORY of OPERATION or PROCEDURE:
                                        (0189) ;
                                        (0190) 
                                        (0191)  I2Cs_SetAddr:
                                        (0192) _I2Cs_SetAddr:
                                        (0193)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0194) IF (I2Cs_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the I2Cs_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0195)    RAM_SETPAGE_CUR >I2Cs_bAddr
                                        (0196)  IF (I2Cs_CY8C22x45)
                                        (0197)    and   A, ~I2Cs_HW_ADDR_EN
                                        (0198)    M8C_SetBank1
                                        (0199)    mov   reg[I2Cs_ADDR_REG], A
                                        (0200)    M8C_SetBank0
                                        (0201)  ENDIF
                                        (0202)    asl   A
                                        (0203)    mov   [I2Cs_bAddr],A
                                        (0204) ELSE                          ;; write to the ADDR register instead
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0206)    and  A, ~I2Cs_HW_ADDR_MASK	; verify address value
                                        (0207)    mov  X, SP
                                        (0208)    push A                                   ; store address value
                                        (0209)    M8C_SetBank1               ;; Set Bank 1
                                        (0210)    mov  A, reg[I2Cs_ADDR_REG]   ; get value from address register
                                        (0211)    and  A, I2Cs_HW_ADDR_MASK    ; define highest bit
                                        (0212)    or   A, [X]                              ; form address value 	
                                        (0213)    mov  reg[I2Cs_ADDR_REG], A   ; set new address value to register
                                        (0214)    M8C_SetBank0               ;; Set Bank 0
                                        (0215)    pop  A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0217) ENDIF
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0219)    ret
                                        (0220) 
                                        (0221) .ENDSECTION
                                        (0222) ENDIF
                                        (0223) 
                                        (0224) .SECTION
                                        (0225) ;-----------------------------------------------------------------------------
                                        (0226) ;  FUNCTION NAME:BYTE I2Cs_GetActivity(void)
                                        (0227) ;
                                        (0228) ;  DESCRIPTION:
                                        (0229) ;    Return a non-zero value if the I2C hardware has seen activity on the bus.
                                        (0230) ;    The activity flag will be cleared if set when calling this function.
                                        (0231) ;
                                        (0232) ;-----------------------------------------------------------------------------
                                        (0233) ;
                                        (0234) ;  ARGUMENTS:  none
                                        (0235) ;
                                        (0236) ;  RETURNS: 
                                        (0237) ;    BYTE  non-zero = Activity
                                        (0238) ;          zero     = No Activity
                                        (0239) ;
                                        (0240) ;  SIDE EFFECTS;    
                                        (0241) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0242) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0243) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0244) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0245) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0246) ;          
                                        (0247) ;    Page Pointer Registers Modified: 
                                        (0248) ;          CUR_PP
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;
                                        (0252) 
                                        (0253)  I2Cs_GetActivity:
                                        (0254) _I2Cs_GetActivity:
                                        (0255)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0256)    RAM_SETPAGE_CUR >I2Cs_bState
06C2: 51 08    MOV   A,[0x8]            (0257)    mov   A,[I2Cs_bState]
06C4: 21 B0    AND   A,0xB0             (0258)    and   A,I2Cs_ACTIVITY_MASK         ; Mask off activity bits
06C6: 26 08 4F AND   [0x8],0x4F         (0259)    and   [I2Cs_bState],~I2Cs_ACTIVITY_MASK ; Clear system activity bits
                                        (0260) 
                                        (0261) I2Cs_GetActivity_End:
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
06C9: 7F       RET                      (0263)    ret
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: BYTE I2Cs_GetAddr(Void)
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;   Get the I2C slave address for the I2Cs I2C bus interface.
                                        (0273) ;
                                        (0274) ;-----------------------------------------------------------------------------
                                        (0275) ;
                                        (0276) ;  ARGUMENTS: none
                                        (0277) ;
                                        (0278) ;  RETURNS: none
                                        (0279) ;
                                        (0280) ;  SIDE EFFECTS;    
                                        (0281) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0282) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0283) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0284) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0285) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0286) ;          
                                        (0287) ;    Page Pointer Registers Modified: 
                                        (0288) ;          CUR_PP
                                        (0289) ;
                                        (0290) ;
                                        (0291) ;  THEORY of OPERATION or PROCEDURE:
                                        (0292) ;
                                        (0293) 
                                        (0294)  I2Cs_GetAddr:
                                        (0295) _I2Cs_GetAddr:
                                        (0296) 
                                        (0297) IF (I2Cs_DYNAMIC_ADDR | I2Cs_AUTO_ADDR_CHECK) ;; if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0298)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0299) IF (I2Cs_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the I2Cs_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0300)    RAM_SETPAGE_CUR >I2Cs_bAddr
                                        (0301)    mov   A,[I2Cs_bAddr]
                                        (0302)    asr   A                          ; Shift Addr to right to drop RW bit.
                                        (0303) ELSE                          ;; read the address from ADDR register instead
                                        (0304)    M8C_SetBank1               ;; Set Bank 1 
                                        (0305)    mov A, reg[I2Cs_ADDR_REG]
                                        (0306)    M8C_SetBank0               ;; Set Bank 0
                                        (0307) ENDIF
                                        (0308)    and   A, 0x7f              ; Mask off bogus MSb
                                        (0309)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0310) ELSE
06CA: 50 52    MOV   A,0x52             (0311)    mov   A,0x52            
                                        (0312) ENDIF
06CC: 7F       RET                      (0313)    ret
                                        (0314) 
                                        (0315) .ENDSECTION
                                        (0316) 
                                        (0317) 
                                        (0318) 
                                        (0319) .SECTION
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;  FUNCTION NAME: I2Cs_EnableInt
                                        (0322) ;  FUNCTION NAME: I2Cs_ResumeInt
                                        (0323) ;  DESCRIPTION:
                                        (0324) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0325) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0326) ;	  I2Cs_ResumeInt performs the enable int function without fist clearing
                                        (0327) ;     pending interrupts.
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;
                                        (0330) ;  ARGUMENTS: none
                                        (0331) ;
                                        (0332) ;  RETURNS: none
                                        (0333) ;
                                        (0334) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0335) ;
                                        (0336) ;  THEORY of OPERATION or PROCEDURE:
                                        (0337) ;
                                        (0338)  I2Cs_ResumeInt:
                                        (0339) _I2Cs_ResumeInt:
                                        (0340)    RAM_PROLOGUE RAM_USE_CLASS_1
06CD: 80 04    JMP   0x06D2             (0341)    jmp   ResumeEntry
06CF: 62 DD FE MOV   REG[0xDD],0xFE     
06D2: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0342) 
                                        (0343)  I2Cs_EnableInt:
                                        (0344) _I2Cs_EnableInt:
                                        (0345)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0346)    ;first clear any pending interrupts
                                        (0347)    M8C_ClearIntFlag INT_CLR3, I2Cs_INT_MASK   
                                        (0348) ResumeEntry:
                                        (0349)    M8C_EnableIntMask I2Cs_INT_REG, I2Cs_INT_MASK
                                        (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
06D5: 7F       RET                      (0351)    ret
                                        (0352) 
                                        (0353) .ENDSECTION
                                        (0354) 
                                        (0355) .SECTION
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;  FUNCTION NAME: I2Cs_EnableSlave
                                        (0358) ;
                                        (0359) ;  DESCRIPTION:
                                        (0360) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0361) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0362) ;
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS: none
                                        (0366) ;
                                        (0367) ;  RETURNS: none
                                        (0368) ;
                                        (0369) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0370) ;
                                        (0371) ;  THEORY of OPERATION or PROCEDURE:
                                        (0372) ;
                                        (0373) 
                                        (0374)  I2Cs_EnableSlave:
                                        (0375) _I2Cs_EnableSlave:
                                        (0376) 
                                        (0377)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0378)     
                                        (0379)     IF (I2Cs_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID
                                        (0380)     ; Save original CPU clock speed
                                        (0381)     M8C_SetBank1          ; Set Bank 1 
                                        (0382)     mov  A,reg[OSC_CR0]   ; Get current configuration of OSC_CR0 (Bank 1)
                                        (0383)     push A                ; Save OSC_CR0 configuration
                                        (0384)     and  A,0xF8           ; Mask off CPU speed
                                        (0385)     or   A,0x05           ; Set clock to 750KHz
                                        (0386)     mov  reg[OSC_CR0],A   ; Write new value to OSC_CR0 (Bank 1)
                                        (0387)     M8C_SetBank0          ; Back to Bank 0
                                        (0388)     ENDIF 
                                        (0389)     ; Enable I2C Slave
                                        (0390)     IF(I2Cs_USED_I2C_BLOCK)
                                        (0391)     M8C_SetBank1
                                        (0392)     or   reg[I2Cs_CFG_REG],(I2Cs_CFG_Slave_EN | I2Cs_CFG_BUS_ERROR_IE | I2Cs_CFG_STOP_IE)
                                        (0393)     M8C_SetBank0
                                        (0394)     ELSE
06D6: 43 D6 31 OR    REG[0xD6],0x31     (0395)     or   reg[I2Cs_CFG_REG],(I2Cs_CFG_Slave_EN | I2Cs_CFG_BUS_ERROR_IE | I2Cs_CFG_STOP_IE)
                                        (0396)     ENDIF
                                        (0397)     IF (I2Cs_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID    
                                        (0398)     ; Restore original CPU clock speed
                                        (0399)     pop  A
                                        (0400)     M8C_SetBank1          ; Set Bank 1
                                        (0401)     mov  reg[OSC_CR0],A   ; Restore
                                        (0402)     M8C_SetBank0          ; Back to Bank 0
                                        (0403)     ENDIF    
                                        (0404)     RAM_EPILOGUE RAM_USE_CLASS_1
06D9: 7F       RET                      (0405)     ret
06DA: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0406) 
                                        (0407) .ENDSECTION
                                        (0408) 
                                        (0409) .SECTION
                                        (0410) ;-----------------------------------------------------------------------------
                                        (0411) ;  FUNCTION NAME: I2Cs_DisableInt
                                        (0412) ;  FUNCTION NAME: I2Cs_Stop
                                        (0413) ;
                                        (0414) ;  DESCRIPTION:
                                        (0415) ;     Disables I2Cs slave by disabling SDA interrupt
                                        (0416) ;
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;
                                        (0419) ;  ARGUMENTS: none
                                        (0420) ;
                                        (0421) ;  RETURNS: none
                                        (0422) ;
                                        (0423) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0424) ;
                                        (0425) ;  THEORY of OPERATION or PROCEDURE:
                                        (0426) ;
                                        (0427) 
                                        (0428)  I2Cs_Stop:
                                        (0429) _I2Cs_Stop:
                                        (0430)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0431) 
                                        (0432)    M8C_DisableIntMask I2Cs_INT_REG, I2Cs_INT_MASK
                                        (0433)    IF(I2Cs_USED_I2C_BLOCK)
                                        (0434)    M8C_SetBank1
                                        (0435)    and  reg[I2Cs_CFG_REG],~I2Cs_CFG_Slave_EN
                                        (0436)    M8C_SetBank0
                                        (0437)    ELSE
06DD: 41 D6 FE AND   REG[0xD6],0xFE     (0438)    and  reg[I2Cs_CFG_REG],~I2Cs_CFG_Slave_EN
                                        (0439)    ENDIF
                                        (0440)    RAM_EPILOGUE RAM_USE_CLASS_1
06E0: 7F       RET                      (0441)    ret
06E1: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0442) 
                                        (0443) .ENDSECTION
                                        (0444) 
                                        (0445) 
                                        (0446) 
                                        (0447) .SECTION
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) ;  FUNCTION NAME: I2Cs_DisableInt
                                        (0450) ;  FUNCTION NAME: I2Cs_Stop
                                        (0451) ;
                                        (0452) ;  DESCRIPTION:
                                        (0453) ;     Disables I2Cs slave by disabling SDA interrupt
                                        (0454) ;
                                        (0455) ;-----------------------------------------------------------------------------
                                        (0456) ;
                                        (0457) ;  ARGUMENTS: none
                                        (0458) ;
                                        (0459) ;  RETURNS: none
                                        (0460) ;
                                        (0461) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0462) ;
                                        (0463) ;  THEORY of OPERATION or PROCEDURE:
                                        (0464) ;
                                        (0465) 
                                        (0466)  I2Cs_DisableInt:
                                        (0467) _I2Cs_DisableInt:
                                        (0468)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0469)    M8C_DisableIntMask I2Cs_INT_REG, I2Cs_INT_MASK
                                        (0470)    RAM_EPILOGUE RAM_USE_CLASS_1
06E4: 7F       RET                      (0471)    ret
                                        (0472) 
                                        (0473) .ENDSECTION
                                        (0474) 
                                        (0475) .SECTION
                                        (0476) ;-----------------------------------------------------------------------------
                                        (0477) ;  FUNCTION NAME: I2Cs_DisableSlave
                                        (0478) ;
                                        (0479) ;  DESCRIPTION:
                                        (0480) ;     Disables I2Cs slave by disabling SDA interrupt
                                        (0481) ;
                                        (0482) ;-----------------------------------------------------------------------------
                                        (0483) ;
                                        (0484) ;  ARGUMENTS: none
                                        (0485) ;
                                        (0486) ;  RETURNS: none
                                        (0487) ;
                                        (0488) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0489) ;
                                        (0490) ;  THEORY of OPERATION or PROCEDURE:
                                        (0491) ;
                                        (0492) 
                                        (0493)  I2Cs_DisableSlave:
                                        (0494) _I2Cs_DisableSlave:
                                        (0495)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0496)    IF(I2Cs_USED_I2C_BLOCK)
                                        (0497)    M8C_SetBank1
                                        (0498)    and  reg[I2Cs_CFG_REG],~I2Cs_CFG_Slave_EN
                                        (0499)    M8C_SetBank0
                                        (0500)    ELSE
06E5: 41 D6 FE AND   REG[0xD6],0xFE     (0501)    and  reg[I2Cs_CFG_REG],~I2Cs_CFG_Slave_EN
                                        (0502)    ENDIF
                                        (0503)    RAM_EPILOGUE RAM_USE_CLASS_1
06E8: 7F       RET                      (0504)    ret
06E9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0505) 
                                        (0506) .ENDSECTION
                                        (0507) 
                                        (0508) .SECTION
                                        (0509) ;-----------------------------------------------------------------------------
                                        (0510) ;  FUNCTION NAME: 
                                        (0511) ;          void I2Cs_SetRamBuffer(BYTE bSize, BYTE bRWboundry, BYTE * pAddr)
                                        (0512) ;
                                        (0513) ;  DESCRIPTION:
                                        (0514) ;     Sets the location and size of the I2C RAM buffer.          
                                        (0515) ;
                                        (0516) ;-----------------------------------------------------------------------------
                                        (0517) ;
                                        (0518) ;  ARGUMENTS: 
                                        (0519) ;     [SP-3] =>  Size of data structure
                                        (0520) ;     [SP-4] =>  R/W boundary of (Must be less than or equal to size.)
                                        (0521) ;     [SP-5] =>  LSB of data pointer
                                        (0522) ;     [SP-6] =>  MSB of data pointer (Only used for large memory model)
                                        (0523) ;
                                        (0524) ;  RETURNS: none
                                        (0525) ;
                                        (0526) ;  SIDE EFFECTS;    
                                        (0527) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0528) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0529) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0530) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0531) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0532) ;          
                                        (0533) ;    Page Pointer Registers Modified: 
                                        (0534) ;          CUR_PP
                                        (0535) ;
                                        (0536) ;  THEORY of OPERATION or PROCEDURE:
                                        (0537) ;
                                        (0538) 
                                        (0539) ; Stack offset constants
                                        (0540) RAMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0541) RW_SIZE:       equ  -4   ; Stack position for R/W area size.       
                                        (0542) RAMPTR_LSB:    equ  -5   ; Stack position for RAM pointer LSB.   
                                        (0543) RAMPTR_MSB:    equ  -6   ; Stack position for RAM pointer MSB.   
                                        (0544) 
                                        (0545)  I2Cs_SetRamBuffer:
                                        (0546) _I2Cs_SetRamBuffer:
                                        (0547) 
                                        (0548)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0549)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0550)     RAM_SETPAGE_CUR >I2Cs_bRAM_Buf_Size      ; Set page to global var page.
                                        (0551)                                                         ; All these globals should be
                                        (0552)                                                         ; on the same page.          
06EC: 4F       MOV   X,SP               (0553)     mov   X,SP
06ED: 52 FD    MOV   A,[X-3]            (0554)     mov   A,[X+RAMBUF_SIZE]
06EF: 53 0D    MOV   [0xD],A            (0555)     mov   [I2Cs_bRAM_Buf_Size],A             ; Store the buffer size
                                        (0556) 
06F1: 52 FC    MOV   A,[X-4]            (0557)     mov   A,[X+RW_SIZE]                            ; Store R/W boundary             
06F3: 53 0E    MOV   [0xE],A            (0558)     mov   [I2Cs_bRAM_Buf_WSize],A            ; 
                                        (0559)     
06F5: 52 FB    MOV   A,[X-5]            (0560)     mov   A,[X+RAMPTR_LSB]                         ; Store only LSB of data pointer
06F7: 53 0C    MOV   [0xC],A            (0561)     mov   [I2Cs_pRAM_Buf_Addr_LSB],A         ; 
                                        (0562) 
                                        (0563) IF (SYSTEM_LARGE_MEMORY_MODEL)                             ; Only worry about the address MSB
                                        (0564)                                                            ; if in the large memory Model
06F9: 52 FA    MOV   A,[X-6]            (0565)     mov   A,[X+RAMPTR_MSB]                         ; Store only MSB of data pointer
06FB: 53 0B    MOV   [0xB],A            (0566)     mov   [I2Cs_pRAM_Buf_Addr_MSB],A         ; 
06FD: 70 3F    AND   F,0x3F             
06FF: 71 C0    OR    F,0xC0             
                                        (0567) ENDIF
                                        (0568) 
                                        (0569)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0570)     RAM_EPILOGUE RAM_USE_CLASS_4
0701: 7F       RET                      (0571)     ret
                                        (0572) 
                                        (0573) .ENDSECTION
                                        (0574) 
                                        (0575) IF (I2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0576) .SECTION
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;  FUNCTION NAME: 
                                        (0579) ;          void I2Cs_SetRomBuffer(BYTE bSize, BYTE * pAddr)
                                        (0580) ;
                                        (0581) ;  DESCRIPTION:
                                        (0582) ;     Sets the location and size of the I2C ROM buffer.          
                                        (0583) ;
                                        (0584) ;-----------------------------------------------------------------------------
                                        (0585) ;
                                        (0586) ;  ARGUMENTS: 
                                        (0587) ;     [SP-3] =>  Size of data const data structure
                                        (0588) ;     [SP-4] =>  LSB of data pointer
                                        (0589) ;     [SP-5] =>  MSB of data pointer (Only used for large memory model)
                                        (0590) ;
                                        (0591) ;  RETURNS: none
                                        (0592) ;
                                        (0593) ;  SIDE EFFECTS;    
                                        (0594) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0595) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0596) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0597) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0598) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0599) ;          
                                        (0600) ;    Page Pointer Registers Modified: 
                                        (0601) ;          CUR_PP
                                        (0602) ;
                                        (0603) ;  THEORY of OPERATION or PROCEDURE:
                                        (0604) ;
                                        (0605) 
                                        (0606) ; Stack offset constants
                                        (0607) ROMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0608) ROMPTR_LSB:    equ  -4   ; Stack position for ROM pointer LSB.   
                                        (0609) ROMPTR_MSB:    equ  -5   ; Stack position for ROM pointer MSB.   
                                        (0610) 
                                        (0611)  I2Cs_SetRomBuffer:
                                        (0612) _I2Cs_SetRomBuffer:
                                        (0613) 
                                        (0614)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0615)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0616)     RAM_SETPAGE_CUR >I2Cs_bROM_Buf_Size      ; Set page to global var page.
                                        (0617)                                                         ; All these globals should be
                                        (0618)                                                         ; on the same page.          
                                        (0619)     mov   X,SP
                                        (0620)     mov   A,[X+ROMBUF_SIZE]
                                        (0621)     mov   [I2Cs_bROM_Buf_Size],A             ; Store the buffer size
                                        (0622) 
                                        (0623)     mov   A,[X+ROMPTR_LSB]                         ; Store LSB of data pointer
                                        (0624)     mov   [I2Cs_pROM_Buf_Addr_LSB],A         ; 
                                        (0625)     mov   A,[X+ROMPTR_MSB]                         ; Store MSB of data pointer
                                        (0626)     mov   [I2Cs_pROM_Buf_Addr_MSB],A         ; 
                                        (0627)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0628)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0629)     ret
                                        (0630) 
                                        (0631) .ENDSECTION
                                        (0632) ENDIF
                                        (0633) 
                                        (0634) IF (I2Cs_CY8C22x45)
                                        (0635)  .SECTION
                                        (0636) ;-----------------------------------------------------------------------------
                                        (0637) ;  FUNCTION NAME: void  I2Cs_EnableHWAddrCheck(void)
                                        (0638) ;
                                        (0639) ;  DESCRIPTION:
                                        (0640) ;   Set respective bit to engage the HardWare Address Recognition 
                                        (0641) ;   feature in I2C slave block.
                                        (0642) ;
                                        (0643) ;-----------------------------------------------------------------------------
                                        (0644) ;
                                        (0645) ;  ARGUMENTS: none
                                        (0646) ;
                                        (0647) ;  RETURNS: none
                                        (0648) ;
                                        (0649) ;  SIDE EFFECTS:
                                        (0650) ;    If the HardWare Address Recognition feature is enabled, the ROM registers reading does not work.
                                        (0651) ;    The HardWare Address Recognition feature should be disabled for using ROM registers.
                                        (0652) ;
                                        (0653) ;    The A and X registers may be modified by this or future implementations
                                        (0654) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0655) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0656) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0657) ;    functions.
                                        (0658) ;
                                        (0659)  I2Cs_EnableHWAddrCheck:
                                        (0660) _I2Cs_EnableHWAddrCheck:
                                        (0661)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0662)    M8C_SetBank1
                                        (0663)    or    reg[I2Cs_ADDR_REG], I2Cs_HW_ADDR_EN
                                        (0664)    M8C_SetBank0
                                        (0665)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0666)    ret
                                        (0667) .ENDSECTION
                                        (0668) 
                                        (0669) .SECTION
                                        (0670) ;-----------------------------------------------------------------------------
                                        (0671) ;  FUNCTION NAME: void  I2Cs_DisableHWAddrCheck(void)
                                        (0672) ;
                                        (0673) ;  DESCRIPTION:
                                        (0674) ;   Clear respective bit to disengage the HardWare Address Recognition 
                                        (0675) ;   feature in I2C slave block.
                                        (0676) ;
                                        (0677) ;-----------------------------------------------------------------------------
                                        (0678) ;
                                        (0679) ;  ARGUMENTS: none
                                        (0680) ;
                                        (0681) ;  RETURNS: none
                                        (0682) ;
                                        (0683) ;  SIDE EFFECTS:
                                        (0684) ;    The A and X registers may be modified by this or future implementations
                                        (0685) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0686) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0687) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0688) ;    functions.
                                        (0689) ;
                                        (0690)  I2Cs_DisableHWAddrCheck:
                                        (0691) _I2Cs_DisableHWAddrCheck:
                                        (0692)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0693)    M8C_SetBank1
                                        (0694)    and   reg[I2Cs_ADDR_REG], ~I2Cs_HW_ADDR_EN
                                        (0695)    M8C_SetBank0
                                        (0696)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0697)    ret
                                        (0698) .ENDSECTION
                                        (0699) ENDIF
                                        (0700) 
                                        (0701) ; End of File I2Cs.asm
FILE: lib\backrightmotor_pint.asm       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: BackRightMotor_PINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "BackRightMotor_P.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _BackRightMotor_P_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _BackRightMotor_P_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _BackRightMotor_P_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0702: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file BackRightMotor_PINT.asm
FILE: lib\backrightmotor_p.asm          (0001) ;;*****************************************************************************
0703: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: BackRightMotor_P.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "BackRightMotor_P.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  BackRightMotor_P_EnableInt
                                        (0030) export _BackRightMotor_P_EnableInt
                                        (0031) export  BackRightMotor_P_DisableInt
                                        (0032) export _BackRightMotor_P_DisableInt
                                        (0033) export  BackRightMotor_P_Start
                                        (0034) export _BackRightMotor_P_Start
                                        (0035) export  BackRightMotor_P_Stop
                                        (0036) export _BackRightMotor_P_Stop
                                        (0037) export  BackRightMotor_P_WritePeriod
                                        (0038) export _BackRightMotor_P_WritePeriod
                                        (0039) export  BackRightMotor_P_WritePulseWidth
                                        (0040) export _BackRightMotor_P_WritePulseWidth
                                        (0041) export  BackRightMotor_P_bReadPulseWidth
                                        (0042) export _BackRightMotor_P_bReadPulseWidth
                                        (0043) export  BackRightMotor_P_bReadCounter
                                        (0044) export _BackRightMotor_P_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bBackRightMotor_P_ReadPulseWidth    ; deprecated
                                        (0049) export _bBackRightMotor_P_ReadPulseWidth    ; deprecated
                                        (0050) export  bBackRightMotor_P_ReadCounter       ; deprecated
                                        (0051) export _bBackRightMotor_P_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA rpi_robot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: BackRightMotor_P_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  BackRightMotor_P_EnableInt:
                                        (0091) _BackRightMotor_P_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    BackRightMotor_P_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0706: 7F       RET                      (0095)    ret
0707: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: BackRightMotor_P_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  BackRightMotor_P_DisableInt:
                                        (0119) _BackRightMotor_P_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    BackRightMotor_P_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
070A: 7F       RET                      (0123)    ret
070B: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: BackRightMotor_P_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  BackRightMotor_P_Start:
                                        (0148) _BackRightMotor_P_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    BackRightMotor_P_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
070E: 7F       RET                      (0152)    ret
070F: 41 33 FE AND   REG[0x33],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: BackRightMotor_P_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  BackRightMotor_P_Stop:
                                        (0176) _BackRightMotor_P_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    BackRightMotor_P_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0712: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: BackRightMotor_P_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  BackRightMotor_P_WritePeriod:
                                        (0206) _BackRightMotor_P_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0713: 60 31    MOV   REG[0x31],A        (0208)    mov   reg[BackRightMotor_P_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0715: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: BackRightMotor_P_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  BackRightMotor_P_WritePulseWidth:
                                        (0233) _BackRightMotor_P_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0716: 60 32    MOV   REG[0x32],A        (0235)    mov   reg[BackRightMotor_P_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0718: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: BackRightMotor_P_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  BackRightMotor_P_bReadPulseWidth:
                                        (0260) _BackRightMotor_P_bReadPulseWidth:
                                        (0261)  bBackRightMotor_P_ReadPulseWidth:                  ; this name deprecated
                                        (0262) _bBackRightMotor_P_ReadPulseWidth:                  ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0719: 5D 32    MOV   A,REG[0x32]        (0264)    mov   A, reg[BackRightMotor_P_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
071B: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: BackRightMotor_P_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  BackRightMotor_P_bReadCounter:
                                        (0293) _BackRightMotor_P_bReadCounter:
                                        (0294)  bBackRightMotor_P_ReadCounter:                  ; this name deprecated
                                        (0295) _bBackRightMotor_P_ReadCounter:                  ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
071C: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
071D: 5D 32    MOV   A,REG[0x32]        (0304)    mov   A, reg[BackRightMotor_P_COMPARE_REG]    ; Save the Compare register on the stack
071F: 08       PUSH  A                  (0305)    push  A                                       ;
0720: 41 33 FE AND   REG[0x33],0xFE     
0723: 71 10    OR    F,0x10             
                                        (0306)    BackRightMotor_P_Stop_M                       ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0725: 5D 31    MOV   A,REG[0x31]        (0308)    mov   A, reg[BackRightMotor_P_INPUT_REG]      ; save the clock input setting
0727: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0728: 62 31 00 MOV   REG[0x31],0x0      (0311)    mov   reg[BackRightMotor_P_INPUT_REG], INPUT_REG_NULL
072B: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
072D: 5D 30    MOV   A,REG[0x30]        (0314)    mov   A, reg[BackRightMotor_P_COUNTER_REG]    ; DR2 <- DR0
072F: 5D 32    MOV   A,REG[0x32]        (0315)    mov   A, reg[BackRightMotor_P_COMPARE_REG]    ; Stash the Count on the stack
0731: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0732: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0734: 60 32    MOV   REG[0x32],A        (0318)    mov   reg[BackRightMotor_P_COMPARE_REG], A
0736: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0738: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
073A: 60 31    MOV   REG[0x31],A        (0321)    mov   reg[BackRightMotor_P_INPUT_REG], A      ;
073C: 70 EF    AND   F,0xEF             
073E: 43 33 01 OR    REG[0x33],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    BackRightMotor_P_Start_M                      ;   then re-enable the PWM.
0741: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0742: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0744: 70 3F    AND   F,0x3F             
0746: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0748: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File BackRightMotor_P.asm
FILE: lib\backrightmotor_nint.asm       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: BackRightMotor_NINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "BackRightMotor_N.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _BackRightMotor_N_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _BackRightMotor_N_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _BackRightMotor_N_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0749: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file BackRightMotor_NINT.asm
FILE: lib\backrightmotor_n.asm          (0001) ;;*****************************************************************************
074A: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: BackRightMotor_N.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "BackRightMotor_N.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  BackRightMotor_N_EnableInt
                                        (0030) export _BackRightMotor_N_EnableInt
                                        (0031) export  BackRightMotor_N_DisableInt
                                        (0032) export _BackRightMotor_N_DisableInt
                                        (0033) export  BackRightMotor_N_Start
                                        (0034) export _BackRightMotor_N_Start
                                        (0035) export  BackRightMotor_N_Stop
                                        (0036) export _BackRightMotor_N_Stop
                                        (0037) export  BackRightMotor_N_WritePeriod
                                        (0038) export _BackRightMotor_N_WritePeriod
                                        (0039) export  BackRightMotor_N_WritePulseWidth
                                        (0040) export _BackRightMotor_N_WritePulseWidth
                                        (0041) export  BackRightMotor_N_bReadPulseWidth
                                        (0042) export _BackRightMotor_N_bReadPulseWidth
                                        (0043) export  BackRightMotor_N_bReadCounter
                                        (0044) export _BackRightMotor_N_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bBackRightMotor_N_ReadPulseWidth    ; deprecated
                                        (0049) export _bBackRightMotor_N_ReadPulseWidth    ; deprecated
                                        (0050) export  bBackRightMotor_N_ReadCounter       ; deprecated
                                        (0051) export _bBackRightMotor_N_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA rpi_robot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: BackRightMotor_N_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  BackRightMotor_N_EnableInt:
                                        (0091) _BackRightMotor_N_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    BackRightMotor_N_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
074D: 7F       RET                      (0095)    ret
074E: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: BackRightMotor_N_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  BackRightMotor_N_DisableInt:
                                        (0119) _BackRightMotor_N_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    BackRightMotor_N_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0751: 7F       RET                      (0123)    ret
0752: 43 37 01 OR    REG[0x37],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: BackRightMotor_N_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  BackRightMotor_N_Start:
                                        (0148) _BackRightMotor_N_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    BackRightMotor_N_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0755: 7F       RET                      (0152)    ret
0756: 41 37 FE AND   REG[0x37],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: BackRightMotor_N_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  BackRightMotor_N_Stop:
                                        (0176) _BackRightMotor_N_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    BackRightMotor_N_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0759: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: BackRightMotor_N_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  BackRightMotor_N_WritePeriod:
                                        (0206) _BackRightMotor_N_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
075A: 60 35    MOV   REG[0x35],A        (0208)    mov   reg[BackRightMotor_N_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
075C: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: BackRightMotor_N_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  BackRightMotor_N_WritePulseWidth:
                                        (0233) _BackRightMotor_N_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
075D: 60 36    MOV   REG[0x36],A        (0235)    mov   reg[BackRightMotor_N_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
075F: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: BackRightMotor_N_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  BackRightMotor_N_bReadPulseWidth:
                                        (0260) _BackRightMotor_N_bReadPulseWidth:
                                        (0261)  bBackRightMotor_N_ReadPulseWidth:                  ; this name deprecated
                                        (0262) _bBackRightMotor_N_ReadPulseWidth:                  ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0760: 5D 36    MOV   A,REG[0x36]        (0264)    mov   A, reg[BackRightMotor_N_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0762: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: BackRightMotor_N_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  BackRightMotor_N_bReadCounter:
                                        (0293) _BackRightMotor_N_bReadCounter:
                                        (0294)  bBackRightMotor_N_ReadCounter:                  ; this name deprecated
                                        (0295) _bBackRightMotor_N_ReadCounter:                  ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0763: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0764: 5D 36    MOV   A,REG[0x36]        (0304)    mov   A, reg[BackRightMotor_N_COMPARE_REG]    ; Save the Compare register on the stack
0766: 08       PUSH  A                  (0305)    push  A                                       ;
0767: 41 37 FE AND   REG[0x37],0xFE     
076A: 71 10    OR    F,0x10             
                                        (0306)    BackRightMotor_N_Stop_M                       ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
076C: 5D 35    MOV   A,REG[0x35]        (0308)    mov   A, reg[BackRightMotor_N_INPUT_REG]      ; save the clock input setting
076E: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
076F: 62 35 00 MOV   REG[0x35],0x0      (0311)    mov   reg[BackRightMotor_N_INPUT_REG], INPUT_REG_NULL
0772: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0774: 5D 34    MOV   A,REG[0x34]        (0314)    mov   A, reg[BackRightMotor_N_COUNTER_REG]    ; DR2 <- DR0
0776: 5D 36    MOV   A,REG[0x36]        (0315)    mov   A, reg[BackRightMotor_N_COMPARE_REG]    ; Stash the Count on the stack
0778: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0779: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
077B: 60 36    MOV   REG[0x36],A        (0318)    mov   reg[BackRightMotor_N_COMPARE_REG], A
077D: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
077F: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0781: 60 35    MOV   REG[0x35],A        (0321)    mov   reg[BackRightMotor_N_INPUT_REG], A      ;
0783: 70 EF    AND   F,0xEF             
0785: 43 37 01 OR    REG[0x37],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    BackRightMotor_N_Start_M                      ;   then re-enable the PWM.
0788: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0789: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
078B: 70 3F    AND   F,0x3F             
078D: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
078F: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File BackRightMotor_N.asm
FILE: lib\backleftmotor_pint.asm        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: BackLeftMotor_PINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "BackLeftMotor_P.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _BackLeftMotor_P_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _BackLeftMotor_P_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _BackLeftMotor_P_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0790: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file BackLeftMotor_PINT.asm
FILE: lib\backleftmotor_p.asm           (0001) ;;*****************************************************************************
0791: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: BackLeftMotor_P.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "BackLeftMotor_P.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  BackLeftMotor_P_EnableInt
                                        (0030) export _BackLeftMotor_P_EnableInt
                                        (0031) export  BackLeftMotor_P_DisableInt
                                        (0032) export _BackLeftMotor_P_DisableInt
                                        (0033) export  BackLeftMotor_P_Start
                                        (0034) export _BackLeftMotor_P_Start
                                        (0035) export  BackLeftMotor_P_Stop
                                        (0036) export _BackLeftMotor_P_Stop
                                        (0037) export  BackLeftMotor_P_WritePeriod
                                        (0038) export _BackLeftMotor_P_WritePeriod
                                        (0039) export  BackLeftMotor_P_WritePulseWidth
                                        (0040) export _BackLeftMotor_P_WritePulseWidth
                                        (0041) export  BackLeftMotor_P_bReadPulseWidth
                                        (0042) export _BackLeftMotor_P_bReadPulseWidth
                                        (0043) export  BackLeftMotor_P_bReadCounter
                                        (0044) export _BackLeftMotor_P_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bBackLeftMotor_P_ReadPulseWidth    ; deprecated
                                        (0049) export _bBackLeftMotor_P_ReadPulseWidth    ; deprecated
                                        (0050) export  bBackLeftMotor_P_ReadCounter       ; deprecated
                                        (0051) export _bBackLeftMotor_P_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA rpi_robot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: BackLeftMotor_P_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  BackLeftMotor_P_EnableInt:
                                        (0091) _BackLeftMotor_P_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    BackLeftMotor_P_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0794: 7F       RET                      (0095)    ret
0795: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: BackLeftMotor_P_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  BackLeftMotor_P_DisableInt:
                                        (0119) _BackLeftMotor_P_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    BackLeftMotor_P_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0798: 7F       RET                      (0123)    ret
0799: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: BackLeftMotor_P_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  BackLeftMotor_P_Start:
                                        (0148) _BackLeftMotor_P_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    BackLeftMotor_P_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
079C: 7F       RET                      (0152)    ret
079D: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: BackLeftMotor_P_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  BackLeftMotor_P_Stop:
                                        (0176) _BackLeftMotor_P_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    BackLeftMotor_P_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
07A0: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: BackLeftMotor_P_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  BackLeftMotor_P_WritePeriod:
                                        (0206) _BackLeftMotor_P_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
07A1: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[BackLeftMotor_P_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
07A3: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: BackLeftMotor_P_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  BackLeftMotor_P_WritePulseWidth:
                                        (0233) _BackLeftMotor_P_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
07A4: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[BackLeftMotor_P_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
07A6: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: BackLeftMotor_P_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  BackLeftMotor_P_bReadPulseWidth:
                                        (0260) _BackLeftMotor_P_bReadPulseWidth:
                                        (0261)  bBackLeftMotor_P_ReadPulseWidth:                  ; this name deprecated
                                        (0262) _bBackLeftMotor_P_ReadPulseWidth:                  ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
07A7: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[BackLeftMotor_P_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
07A9: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: BackLeftMotor_P_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  BackLeftMotor_P_bReadCounter:
                                        (0293) _BackLeftMotor_P_bReadCounter:
                                        (0294)  bBackLeftMotor_P_ReadCounter:                   ; this name deprecated
                                        (0295) _bBackLeftMotor_P_ReadCounter:                   ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
07AA: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
07AB: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[BackLeftMotor_P_COMPARE_REG]     ; Save the Compare register on the stack
07AD: 08       PUSH  A                  (0305)    push  A                                       ;
07AE: 41 23 FE AND   REG[0x23],0xFE     
07B1: 71 10    OR    F,0x10             
                                        (0306)    BackLeftMotor_P_Stop_M                        ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
07B3: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[BackLeftMotor_P_INPUT_REG]       ; save the clock input setting
07B5: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
07B6: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[BackLeftMotor_P_INPUT_REG], INPUT_REG_NULL
07B9: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
07BB: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[BackLeftMotor_P_COUNTER_REG]     ; DR2 <- DR0
07BD: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[BackLeftMotor_P_COMPARE_REG]     ; Stash the Count on the stack
07BF: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
07C0: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
07C2: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[BackLeftMotor_P_COMPARE_REG], A
07C4: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
07C6: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
07C8: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[BackLeftMotor_P_INPUT_REG], A       ;
07CA: 70 EF    AND   F,0xEF             
07CC: 43 23 01 OR    REG[0x23],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    BackLeftMotor_P_Start_M                       ;   then re-enable the PWM.
07CF: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
07D0: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
07D2: 70 3F    AND   F,0x3F             
07D4: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
07D6: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File BackLeftMotor_P.asm
FILE: lib\backleftmotor_nint.asm        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: BackLeftMotor_NINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "BackLeftMotor_N.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _BackLeftMotor_N_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _BackLeftMotor_N_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _BackLeftMotor_N_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
07D7: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file BackLeftMotor_NINT.asm
FILE: lib\backleftmotor_n.asm           (0001) ;;*****************************************************************************
07D8: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: BackLeftMotor_N.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "BackLeftMotor_N.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  BackLeftMotor_N_EnableInt
                                        (0030) export _BackLeftMotor_N_EnableInt
                                        (0031) export  BackLeftMotor_N_DisableInt
                                        (0032) export _BackLeftMotor_N_DisableInt
                                        (0033) export  BackLeftMotor_N_Start
                                        (0034) export _BackLeftMotor_N_Start
                                        (0035) export  BackLeftMotor_N_Stop
                                        (0036) export _BackLeftMotor_N_Stop
                                        (0037) export  BackLeftMotor_N_WritePeriod
                                        (0038) export _BackLeftMotor_N_WritePeriod
                                        (0039) export  BackLeftMotor_N_WritePulseWidth
                                        (0040) export _BackLeftMotor_N_WritePulseWidth
                                        (0041) export  BackLeftMotor_N_bReadPulseWidth
                                        (0042) export _BackLeftMotor_N_bReadPulseWidth
                                        (0043) export  BackLeftMotor_N_bReadCounter
                                        (0044) export _BackLeftMotor_N_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bBackLeftMotor_N_ReadPulseWidth    ; deprecated
                                        (0049) export _bBackLeftMotor_N_ReadPulseWidth    ; deprecated
                                        (0050) export  bBackLeftMotor_N_ReadCounter       ; deprecated
                                        (0051) export _bBackLeftMotor_N_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA rpi_robot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: BackLeftMotor_N_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  BackLeftMotor_N_EnableInt:
                                        (0091) _BackLeftMotor_N_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    BackLeftMotor_N_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
07DB: 7F       RET                      (0095)    ret
07DC: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: BackLeftMotor_N_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  BackLeftMotor_N_DisableInt:
                                        (0119) _BackLeftMotor_N_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    BackLeftMotor_N_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
07DF: 7F       RET                      (0123)    ret
07E0: 43 27 01 OR    REG[0x27],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: BackLeftMotor_N_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  BackLeftMotor_N_Start:
                                        (0148) _BackLeftMotor_N_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    BackLeftMotor_N_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
07E3: 7F       RET                      (0152)    ret
07E4: 41 27 FE AND   REG[0x27],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: BackLeftMotor_N_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  BackLeftMotor_N_Stop:
                                        (0176) _BackLeftMotor_N_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    BackLeftMotor_N_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
07E7: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: BackLeftMotor_N_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  BackLeftMotor_N_WritePeriod:
                                        (0206) _BackLeftMotor_N_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
07E8: 60 25    MOV   REG[0x25],A        (0208)    mov   reg[BackLeftMotor_N_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
07EA: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: BackLeftMotor_N_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  BackLeftMotor_N_WritePulseWidth:
                                        (0233) _BackLeftMotor_N_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
07EB: 60 26    MOV   REG[0x26],A        (0235)    mov   reg[BackLeftMotor_N_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
07ED: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: BackLeftMotor_N_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  BackLeftMotor_N_bReadPulseWidth:
                                        (0260) _BackLeftMotor_N_bReadPulseWidth:
                                        (0261)  bBackLeftMotor_N_ReadPulseWidth:                  ; this name deprecated
                                        (0262) _bBackLeftMotor_N_ReadPulseWidth:                  ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
07EE: 5D 26    MOV   A,REG[0x26]        (0264)    mov   A, reg[BackLeftMotor_N_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
07F0: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: BackLeftMotor_N_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  BackLeftMotor_N_bReadCounter:
                                        (0293) _BackLeftMotor_N_bReadCounter:
                                        (0294)  bBackLeftMotor_N_ReadCounter:                   ; this name deprecated
                                        (0295) _bBackLeftMotor_N_ReadCounter:                   ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
07F1: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
07F2: 5D 26    MOV   A,REG[0x26]        (0304)    mov   A, reg[BackLeftMotor_N_COMPARE_REG]     ; Save the Compare register on the stack
07F4: 08       PUSH  A                  (0305)    push  A                                       ;
07F5: 41 27 FE AND   REG[0x27],0xFE     
07F8: 71 10    OR    F,0x10             
                                        (0306)    BackLeftMotor_N_Stop_M                        ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
07FA: 5D 25    MOV   A,REG[0x25]        (0308)    mov   A, reg[BackLeftMotor_N_INPUT_REG]       ; save the clock input setting
07FC: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
07FD: 62 25 00 MOV   REG[0x25],0x0      (0311)    mov   reg[BackLeftMotor_N_INPUT_REG], INPUT_REG_NULL
0800: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0802: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[BackLeftMotor_N_COUNTER_REG]     ; DR2 <- DR0
0804: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[BackLeftMotor_N_COMPARE_REG]     ; Stash the Count on the stack
0806: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0807: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0809: 60 26    MOV   REG[0x26],A        (0318)    mov   reg[BackLeftMotor_N_COMPARE_REG], A
080B: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
080D: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
080F: 60 25    MOV   REG[0x25],A        (0321)    mov   reg[BackLeftMotor_N_INPUT_REG], A       ;
0811: 70 EF    AND   F,0xEF             
0813: 43 27 01 OR    REG[0x27],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    BackLeftMotor_N_Start_M                       ;   then re-enable the PWM.
0816: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0817: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0819: 70 3F    AND   F,0x3F             
081B: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
081D: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File BackLeftMotor_N.asm
FILE: lib\amux4.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   AMUX4.asm
                                        (0004) ;;  Version: 1.50, Updated on 2013/5/19 at 10:39:58
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: AMux4 User Module software implementation file devices.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) 
                                        (0023) include "AMUX4.inc"
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  AMUX4_InputSelect
                                        (0031) export _AMUX4_InputSelect
                                        (0032) 
                                        (0033) export  AMUX4_Start
                                        (0034) export _AMUX4_Start
                                        (0035) 
                                        (0036) export  AMUX4_Stop
                                        (0037) export _AMUX4_Stop
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  EQUATES
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) MUXMASK:                     equ 03h
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) .SECTION
                                        (0047) ;-----------------------------------------------------------------------------
                                        (0048) ;  FUNCTION NAME: AMUX4_InputSelect
                                        (0049) ;
                                        (0050) ;  DESCRIPTION:
                                        (0051) ;    Place the signal from one of four port0 pins on the Analog Column bus.
                                        (0052) ;
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;
                                        (0055) ;  ARGUMENTS:
                                        (0056) ;    A contains the mux input control value
                                        (0057) ;
                                        (0058) ;      Input           Code
                                        (0059) ;   Mux input 0,1       00h
                                        (0060) ;   Mux input 2,3       01h
                                        (0061) ;   Mux input 4,5       02h
                                        (0062) ;   Mux input 6,7       03h
                                        (0063) ;
                                        (0064) ;  RETURNS: none
                                        (0065) ;
                                        (0066) ;  SIDE EFFECTS:
                                        (0067) ;    The A and X registers may be modified by this or future implementations
                                        (0068) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0069) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0070) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0071) ;    functions.
                                        (0072) ;
                                        (0073)  AMUX4_InputSelect:
                                        (0074) _AMUX4_InputSelect:
                                        (0075)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0076) 	
                                        (0077) IF (AMUX4_COL_COUNT)
                                        (0078) 	M8C_SetBank1      ; ACE_AMX_IN is in Bank 1
                                        (0079) ENDIF
                                        (0080) 	
081E: 21 03    AND   A,0x3              (0081)     and  A, MUXMASK                    ; Mask off only valid port0 input bits
0820: 57 01    MOV   X,0x1              (0082)     mov  X,AMUX4_MUX_COL
                                        (0083) .AMUX4_ShiftIt:                         ; Shift value to correct bit position for Mux
0822: 79       DEC   X                  (0084)     dec  X
0823: C0 05    JC    0x0829             (0085)     jc   .AMUX4_SetIt
0825: 64       ASL   A                  (0086)     asl  A
0826: 64       ASL   A                  (0087)     asl  A
0827: 8F FA    JMP   0x0822             (0088)     jmp  .AMUX4_ShiftIt                ; Loop until bits shifted to 2 LSBs
                                        (0089) 
                                        (0090) .AMUX4_SetIt:
0829: 4F       MOV   X,SP               (0091)     mov  X,SP                          ; Get current stack location
082A: 08       PUSH  A                  (0092)     push A                             ; Save a to OR it to AMX_IN later	
                                        (0093) IF (AMUX4_COL_COUNT)
                                        (0094) 	mov  A, reg[ACE_AMX_IN]                 ; Get current value of mux control register    
                                        (0095) ELSE
082B: 5D 60    MOV   A,REG[0x60]        (0096) 	mov  A, reg[AMX_IN]                 ; Get current value of mux control register
                                        (0097) ENDIF
082D: 21 F3    AND   A,0xF3             (0098)     and  A,~AMUX4_MUX_MASK             ; Mask off the bits for this Mux
082F: 2B 00    OR    A,[X+0]            (0099)     or   A,[X]                         ; OR in the mux control bits
                                        (0100) IF (AMUX4_COL_COUNT)
                                        (0101) 	mov  reg[ACE_AMX_IN], A                 ; Get current value of mux control register    
                                        (0102) ELSE
0831: 60 60    MOV   REG[0x60],A        (0103) 	mov  reg[AMX_IN], A                 ; Write out mux value to mux control register
                                        (0104) ENDIF	
0833: 18       POP   A                  (0105)     pop  A                             ; Restore the stack
0834: 70 3F    AND   F,0x3F             
0836: 71 C0    OR    F,0xC0             
                                        (0106) 	
                                        (0107) IF (AMUX4_COL_COUNT)
                                        (0108) 	M8C_SetBank0
                                        (0109) ENDIF
                                        (0110)     RAM_EPILOGUE RAM_USE_CLASS_2
0838: 7F       RET                      (0111)     ret
                                        (0112) .ENDSECTION
                                        (0113) 
                                        (0114) .SECTION
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;  FUNCTION NAME: AMUX4_Start
                                        (0117) ;
                                        (0118) ;  DESCRIPTION:
                                        (0119) ;   This function does nothing at this time.  It is only here for
                                        (0120) ;   future compatibility.
                                        (0121) ;
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;
                                        (0124) ;  ARGUMENTS: none
                                        (0125) ;
                                        (0126) ;  RETURNS: none
                                        (0127) ;
                                        (0128) ;  SIDE EFFECTS:
                                        (0129) ;    The A and X registers may be modified by this or future implementations
                                        (0130) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0131) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0132) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0133) ;    functions.
                                        (0134) ;
                                        (0135)  AMUX4_Start:
                                        (0136) _AMUX4_Start:
                                        (0137)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0138)     RAM_EPILOGUE RAM_USE_CLASS_1
0839: 7F       RET                      (0139)     ret
                                        (0140) .ENDSECTION
                                        (0141) 
                                        (0142) .SECTION
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;  FUNCTION NAME: AMUX4_Stop
                                        (0145) ;
                                        (0146) ;  DESCRIPTION:
                                        (0147) ;   This function does nothing at this time.  It is only here for
                                        (0148) ;   future compatibility.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:  none
                                        (0153) ;
                                        (0154) ;  RETURNS: none
                                        (0155) ;
                                        (0156) ;  SIDE EFFECTS:
                                        (0157) ;    The A and X registers may be modified by this or future implementations
                                        (0158) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0159) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0160) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0161) ;    functions.
                                        (0162) ;
                                        (0163)  AMUX4_Stop:
                                        (0164) _AMUX4_Stop:
                                        (0165)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0166)     RAM_EPILOGUE RAM_USE_CLASS_1
083A: 7F       RET                      (0167)     ret
                                        (0168) .ENDSECTION
                                        (0169) ; End of File AMUX4.asm
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
083B: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
083C: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
083E: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
0840: 78       DEC   A                  (0062)     dec   A
0841: BF FC    JNZ   0x083E             (0063)     jnz   DELAY50US
                                        (0064) 
0843: 18       POP   A                  (0065) 	pop A
0844: 78       DEC   A                  (0066) 	dec   A
0845: BF F5    JNZ   __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes(0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
0847: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
0848: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
084A: 78       DEC   A                  (0104) 	dec A
084B: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
084D: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
0856: 08       PUSH  A                  (0149)     push  A
0857: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
0859: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
085B: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
085D: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
085F: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
0861: D0 06    JNC   0x0868             (0155)     jnc   Delay50u_End
0863: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
0865: 78       DEC   A                  (0158)     dec   A                            ; [4]
0866: BF FE    JNZ   0x0865             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
0868: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
0869: 7F       RET                      (0163)     ret
                                        (0164) .ENDSECTION
FILE: C:\Users\KUK~1.IWP\Desktop\Robot\RPI_RO~1\RPI_RO~1\RPI_RO~1\main.c
(0001) #include <m8c.h>        // Part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "delay.h"
(0004) #include"stdio.h"
(0005) #include"string.h"
(0006) #include"stdlib.h"
(0007) 	
(0008) #define STOP 0x00
(0009) #define FRONT 0x01
(0010) #define BACK 0x02
(0011) #define LEFT 0x03
(0012) #define RIGHT 0x04
(0013) #define Ctrl_Cmd 0x01
(0014) #define LEFT_SIDE 0x02
(0015) #define RIGHT_SIDE 0x03
(0016) #define INVALID_DISTANCE 0xff
(0017) #define CHANGE_ANGLE 0x01
(0018) #define AUTO_MODE 0x05
(0019) 	
(0020) const int RangeTable[]={
(0021) 	3618,
(0022) 	3271,
(0023) 	2867,
(0024) 	2492,
(0025) 	2210,
(0026) 	1987,
(0027) 	1795,
(0028) 	1639,
(0029) 	1506,
(0030) 	1394,
(0031) 	1287,
(0032) 	1204,
(0033) 	1124,
(0034) 	1061,
(0035) 	1002
(0036) };
(0037) 
(0038) int lRangeTable = sizeof(RangeTable)/sizeof(RangeTable[0]);
(0039) struct I2C_Regs {   
(0040)    
(0041) 	
(0042) 	BYTE bDirection;
(0043)     BYTE bSpeed ;
(0044) 	//BYTE bLeftDistance;
(0045) 	//BYTE bRightDistance;
(0046) 	
(0047) 	
(0048) 	
(0049)  } Robot_Paras;
(0050) 
(0051) int i;
(0052) 
(0053) void Motor_Control(BYTE Motor_Mode);
(0054) BYTE Measure_Distance(BYTE bSide);
(0055) BYTE Lookup_Distance( WORD wADC_Count );
(0056) void Intialize(void);
(0057) void Turn_RangeSensor(int iAngle);
(0058) void Obstacle_Detection(BYTE y1,BYTE y2);
(0059) void main(void)
(0060) {
(0061)   Intialize();
_main:
    086A: 90 10    CALL  _Intialize
    086C: 80 0B    JMP   0x0878
(0062)   while(1)
(0063)   {
(0064) 	Motor_Control(Robot_Paras.bDirection);	
    086E: 62 D0 00 MOV   REG[0xD0],0x0
    0871: 51 1B    MOV   A,[Robot_Paras]
    0873: 08       PUSH  A
    0874: 90 32    CALL  _Motor_Control
    0876: 38 FF    ADD   SP,0xFF
(0065)   }
    0878: 8F F5    JMP   0x086E
    087A: 8F FF    JMP   0x087A
(0066) 	
(0067) }
(0068) 
(0069) void Intialize(void)
(0070) {
(0071) 
(0072)    I2Cs_SetRamBuffer(sizeof(Robot_Paras), 2, (BYTE *)&Robot_Paras); 
_Intialize:
    087C: 10       PUSH  X
    087D: 50 00    MOV   A,0x0
    087F: 08       PUSH  A
    0880: 50 1B    MOV   A,0x1B
    0882: 08       PUSH  A
    0883: 50 02    MOV   A,0x2
    0885: 08       PUSH  A
    0886: 08       PUSH  A
    0887: 7C 06 E9 LCALL _I2Cs_SetRamBuffer
    088A: 38 FC    ADD   SP,0xFC
    088C: 20       POP   X
(0073)    M8C_EnableGInt ; 
    088D: 71 01    OR    F,0x1
(0074)    I2Cs_Start();
    088F: 10       PUSH  X
    0890: 7C 06 8E LCALL _I2Cs_Start
(0075)    Range_PGA_Start(Range_PGA_HIGHPOWER);
    0893: 50 03    MOV   A,0x3
    0895: 7C 04 5C LCALL _Range_PGA_SetPower|_Range_PGA_Start|Range_PGA_Start
(0076)    Range_ADC_Start(Range_ADC_HIGHPOWER); 
    0898: 50 03    MOV   A,0x3
    089A: 7C 05 0A LCALL _Range_ADC_Start
(0077)    AMUX4_Start();
    089D: 7C 08 39 LCALL _AMUX4_Start
    08A0: 20       POP   X
(0078)    Robot_Paras.bSpeed=100; ;
    08A1: 62 D0 00 MOV   REG[0xD0],0x0
    08A4: 55 1C 64 MOV   [Robot_Paras+1],0x64
    08A7: 7F       RET   
(0079)    //Servo_PWM_Start();
(0080) }
(0081) 
(0082) void Motor_Control(BYTE Motor_Mode)
(0083) {
_Motor_Control:
  Motor_Mode           --> X-4
    08A8: 10       PUSH  X
    08A9: 4F       MOV   X,SP
    08AA: 38 02    ADD   SP,0x2
(0084) 	switch(Motor_Mode)
    08AC: 3D FC 00 CMP   [X-4],0x0
    08AF: A0 1C    JZ    0x08CC
    08B1: 3D FC 01 CMP   [X-4],0x1
    08B4: A0 27    JZ    0x08DC
    08B6: 3D FC 02 CMP   [X-4],0x2
    08B9: A0 42    JZ    0x08FC
    08BB: 3D FC 03 CMP   [X-4],0x3
    08BE: A0 5D    JZ    0x091C
    08C0: 3D FC 04 CMP   [X-4],0x4
    08C3: A0 78    JZ    0x093C
    08C5: 3D FC 05 CMP   [X-4],0x5
    08C8: A0 93    JZ    0x095C
    08CA: 80 AD    JMP   0x0978
(0085) 		{
(0086) 
(0087) 			case STOP:
(0088) 			{
(0089) 				BackLeftMotor_P_Stop();
    08CC: 10       PUSH  X
    08CD: 7C 07 9D LCALL _BackLeftMotor_P_Stop
(0090)    				BackRightMotor_P_Stop();
    08D0: 7C 07 0F LCALL _BackRightMotor_P_Stop
(0091)    				BackLeftMotor_N_Stop();
    08D3: 7C 07 E4 LCALL _BackLeftMotor_N_Stop
(0092)    				BackRightMotor_N_Stop();
    08D6: 7C 07 56 LCALL _BackRightMotor_N_Stop
    08D9: 20       POP   X
(0093) 				break;
    08DA: 80 9D    JMP   0x0978
(0094) 			}
(0095) 			case FRONT:
(0096) 			{
(0097) 				BackLeftMotor_P_WritePulseWidth(Robot_Paras.bSpeed);
    08DC: 10       PUSH  X
    08DD: 62 D0 00 MOV   REG[0xD0],0x0
    08E0: 51 1C    MOV   A,[Robot_Paras+1]
    08E2: 7C 07 A4 LCALL _BackLeftMotor_P_WritePulseWidth
(0098) 				BackRightMotor_P_WritePulseWidth(Robot_Paras.bSpeed);
    08E5: 62 D0 00 MOV   REG[0xD0],0x0
    08E8: 51 1C    MOV   A,[Robot_Paras+1]
    08EA: 7C 07 16 LCALL _BackRightMotor_P_WritePulseWidth
(0099) 				BackLeftMotor_P_Start();
    08ED: 7C 07 99 LCALL _BackLeftMotor_P_Start
(0100) 				BackLeftMotor_N_Stop();
    08F0: 7C 07 E4 LCALL _BackLeftMotor_N_Stop
(0101)    				BackRightMotor_P_Start();
    08F3: 7C 07 0B LCALL _BackRightMotor_P_Start
(0102)    				BackRightMotor_N_Stop();
    08F6: 7C 07 56 LCALL _BackRightMotor_N_Stop
    08F9: 20       POP   X
(0103) 				break;
    08FA: 80 7D    JMP   0x0978
(0104) 			}
(0105) 			case BACK:
(0106) 			{
(0107) 				BackLeftMotor_N_WritePulseWidth(Robot_Paras.bSpeed);
    08FC: 10       PUSH  X
    08FD: 62 D0 00 MOV   REG[0xD0],0x0
    0900: 51 1C    MOV   A,[Robot_Paras+1]
    0902: 7C 07 EB LCALL _BackLeftMotor_N_WritePulseWidth
(0108) 				BackRightMotor_N_WritePulseWidth(Robot_Paras.bSpeed);
    0905: 62 D0 00 MOV   REG[0xD0],0x0
    0908: 51 1C    MOV   A,[Robot_Paras+1]
    090A: 7C 07 5D LCALL _BackRightMotor_N_WritePulseWidth
(0109) 				BackLeftMotor_P_Stop();
    090D: 7C 07 9D LCALL _BackLeftMotor_P_Stop
(0110) 				BackLeftMotor_N_Start();
    0910: 7C 07 E0 LCALL _BackLeftMotor_N_Start
(0111)    				BackRightMotor_P_Stop();
    0913: 7C 07 0F LCALL _BackRightMotor_P_Stop
(0112)    				BackRightMotor_N_Start();
    0916: 7C 07 52 LCALL _BackRightMotor_N_Start
    0919: 20       POP   X
(0113) 				break;
    091A: 80 5D    JMP   0x0978
(0114) 			}
(0115) 			case LEFT:
(0116) 			{
(0117) 				BackRightMotor_P_WritePulseWidth(Robot_Paras.bSpeed);
    091C: 10       PUSH  X
    091D: 62 D0 00 MOV   REG[0xD0],0x0
    0920: 51 1C    MOV   A,[Robot_Paras+1]
    0922: 7C 07 16 LCALL _BackRightMotor_P_WritePulseWidth
(0118) 				BackRightMotor_N_Stop();
    0925: 7C 07 56 LCALL _BackRightMotor_N_Stop
(0119) 				BackRightMotor_P_Start();
    0928: 7C 07 0B LCALL _BackRightMotor_P_Start
(0120) 				BackLeftMotor_P_Stop();
    092B: 7C 07 9D LCALL _BackLeftMotor_P_Stop
(0121) 				BackLeftMotor_N_WritePulseWidth(Robot_Paras.bSpeed);
    092E: 62 D0 00 MOV   REG[0xD0],0x0
    0931: 51 1C    MOV   A,[Robot_Paras+1]
    0933: 7C 07 EB LCALL _BackLeftMotor_N_WritePulseWidth
(0122) 				BackLeftMotor_N_Start();
    0936: 7C 07 E0 LCALL _BackLeftMotor_N_Start
    0939: 20       POP   X
(0123) 				break;
    093A: 80 3D    JMP   0x0978
(0124) 			}
(0125) 			case RIGHT:
(0126) 			{
(0127) 				BackLeftMotor_P_WritePulseWidth(Robot_Paras.bSpeed);		
    093C: 10       PUSH  X
    093D: 62 D0 00 MOV   REG[0xD0],0x0
    0940: 51 1C    MOV   A,[Robot_Paras+1]
    0942: 7C 07 A4 LCALL _BackLeftMotor_P_WritePulseWidth
(0128) 				BackLeftMotor_P_Start();
    0945: 7C 07 99 LCALL _BackLeftMotor_P_Start
(0129) 				BackLeftMotor_N_Stop();
    0948: 7C 07 E4 LCALL _BackLeftMotor_N_Stop
(0130)    				BackRightMotor_P_Stop();   				
    094B: 7C 07 0F LCALL _BackRightMotor_P_Stop
(0131)    				BackRightMotor_N_WritePulseWidth(Robot_Paras.bSpeed);
    094E: 62 D0 00 MOV   REG[0xD0],0x0
    0951: 51 1C    MOV   A,[Robot_Paras+1]
    0953: 7C 07 5D LCALL _BackRightMotor_N_WritePulseWidth
(0132) 				BackRightMotor_N_Start();
    0956: 7C 07 52 LCALL _BackRightMotor_N_Start
    0959: 20       POP   X
(0133) 				break;
    095A: 80 1D    JMP   0x0978
(0134) 			}
(0135) 			case AUTO_MODE:
(0136) 			{
(0137) 				Obstacle_Detection(Measure_Distance(LEFT_SIDE),Measure_Distance(RIGHT_SIDE));
    095C: 50 02    MOV   A,0x2
    095E: 08       PUSH  A
    095F: 90 1B    CALL  _Measure_Distance
    0961: 38 FF    ADD   SP,0xFF
    0963: 62 D0 00 MOV   REG[0xD0],0x0
    0966: 54 01    MOV   [X+1],A
    0968: 50 03    MOV   A,0x3
    096A: 08       PUSH  A
    096B: 90 0F    CALL  _Measure_Distance
    096D: 62 D0 00 MOV   REG[0xD0],0x0
    0970: 08       PUSH  A
    0971: 52 01    MOV   A,[X+1]
    0973: 08       PUSH  A
    0974: 92 00    CALL  _Obstacle_Detection
    0976: 38 FD    ADD   SP,0xFD
(0138) 				break;
(0139) 			}
(0140) 			default:
(0141) 			{
(0142) 				break;
    0978: 38 FE    ADD   SP,0xFE
    097A: 20       POP   X
    097B: 7F       RET   
(0143) 			}
(0144) 		
(0145) 		}
(0146) }
(0147) 
(0148) BYTE Measure_Distance(BYTE bSide)
(0149) {	
_Measure_Distance:
  Distance             --> X+0
  bSide                --> X-4
    097C: 10       PUSH  X
    097D: 4F       MOV   X,SP
    097E: 10       PUSH  X
(0150) 	BYTE Distance;
(0151) 	AMUX4_InputSelect(bSide);      
    097F: 10       PUSH  X
    0980: 52 FC    MOV   A,[X-4]
    0982: 7C 08 1E LCALL _AMUX4_InputSelect
(0152) 	Range_ADC_GetSamples(1);
    0985: 50 01    MOV   A,0x1
    0987: 7C 05 35 LCALL _Range_ADC_GetSamples
    098A: 20       POP   X
(0153) 	while(Range_ADC_fIsDataAvailable() == 0);   
    098B: 10       PUSH  X
    098C: 7C 05 72 LCALL _Range_ADC_fIsDataAvailable
    098F: 20       POP   X
    0990: 62 D0 00 MOV   REG[0xD0],0x0
    0993: 39 00    CMP   A,0x0
    0995: AF F5    JZ    0x098B
(0154) 	Distance= Lookup_Distance(Range_ADC_wClearFlagGetData()); 
    0997: 10       PUSH  X
    0998: 7C 05 78 LCALL _Range_ADC_wClearFlagGetData|_Range_ADC_iClearFlagGetData|Range_ADC_iClearFlagGetData|Range_ADC_wClearFlagGetData
    099B: 62 D0 00 MOV   REG[0xD0],0x0
    099E: 5A 16    MOV   [__r0],X
    09A0: 53 15    MOV   [__r1],A
    09A2: 20       POP   X
    09A3: 51 16    MOV   A,[__r0]
    09A5: 08       PUSH  A
    09A6: 51 15    MOV   A,[__r1]
    09A8: 08       PUSH  A
    09A9: 90 0C    CALL  _Lookup_Distance
    09AB: 38 FE    ADD   SP,0xFE
    09AD: 62 D0 00 MOV   REG[0xD0],0x0
    09B0: 54 00    MOV   [X+0],A
(0155) 	return(Distance);
    09B2: 52 00    MOV   A,[X+0]
    09B4: 20       POP   X
    09B5: 20       POP   X
    09B6: 7F       RET   
(0156) 	
(0157) }
(0158) 
(0159) BYTE Lookup_Distance( WORD wADC_Count ) 
(0160) {
_Lookup_Distance:
  Distance             --> X+2
  i                    --> X+0
  wADC_Count           --> X-5
    09B7: 10       PUSH  X
    09B8: 4F       MOV   X,SP
    09B9: 38 06    ADD   SP,0x6
(0161) 	int i;
(0162) 	float Distance;
(0163) 	
(0164) 	if( wADC_Count > RangeTable[0]||wADC_Count < RangeTable[lRangeTable-1] ) 
    09BB: 62 D0 00 MOV   REG[0xD0],0x0
    09BE: 50 01    MOV   A,0x1
    09C0: 10       PUSH  X
    09C1: 57 A0    MOV   X,0xA0
    09C3: 7C 0D 9E LCALL __lpmw
    09C6: 53 15    MOV   [__r1],A
    09C8: 51 12    MOV   A,[__rX]
    09CA: 53 16    MOV   [__r0],A
    09CC: 20       POP   X
    09CD: 51 15    MOV   A,[__r1]
    09CF: 13 FC    SUB   A,[X-4]
    09D1: 51 16    MOV   A,[__r0]
    09D3: 1B FB    SBB   A,[X-5]
    09D5: C0 3C    JC    0x0A12
    09D7: 62 D0 00 MOV   REG[0xD0],0x0
    09DA: 51 18    MOV   A,[lRangeTable+1]
    09DC: 11 01    SUB   A,0x1
    09DE: 62 D0 00 MOV   REG[0xD0],0x0
    09E1: 53 15    MOV   [__r1],A
    09E3: 62 D0 00 MOV   REG[0xD0],0x0
    09E6: 51 17    MOV   A,[lRangeTable]
    09E8: 19 00    SBB   A,0x0
    09EA: 62 D0 00 MOV   REG[0xD0],0x0
    09ED: 53 16    MOV   [__r0],A
    09EF: 65 15    ASL   [__r1]
    09F1: 6B 16    RLC   [__r0]
    09F3: 06 15 A0 ADD   [__r1],0xA0
    09F6: 0E 16 01 ADC   [__r0],0x1
    09F9: 51 16    MOV   A,[__r0]
    09FB: 10       PUSH  X
    09FC: 58 15    MOV   X,[__r1]
    09FE: 7C 0D 9E LCALL __lpmw
    0A01: 53 15    MOV   [__r1],A
    0A03: 51 12    MOV   A,[__rX]
    0A05: 53 16    MOV   [__r0],A
    0A07: 20       POP   X
    0A08: 52 FC    MOV   A,[X-4]
    0A0A: 12 15    SUB   A,[__r1]
    0A0C: 52 FB    MOV   A,[X-5]
    0A0E: 1A 16    SBB   A,[__r0]
    0A10: D0 08    JNC   0x0A19
(0165) 	{
(0166) 		/* overflow/Under Flow */
(0167) 		return INVALID_DISTANCE;
    0A12: 62 D0 00 MOV   REG[0xD0],0x0
    0A15: 50 FF    MOV   A,0xFF
    0A17: 81 5A    JMP   0x0B72
(0168) 	} 
(0169) 	
(0170) 	for( i=0; i<lRangeTable-2; i++ )
    0A19: 56 01 00 MOV   [X+1],0x0
    0A1C: 56 00 00 MOV   [X+0],0x0
    0A1F: 80 3A    JMP   0x0A5A
(0171) 	{
(0172) 		if( wADC_Count >= RangeTable[i+1] )
    0A21: 62 D0 00 MOV   REG[0xD0],0x0
    0A24: 52 01    MOV   A,[X+1]
    0A26: 01 01    ADD   A,0x1
    0A28: 53 15    MOV   [__r1],A
    0A2A: 52 00    MOV   A,[X+0]
    0A2C: 09 00    ADC   A,0x0
    0A2E: 53 16    MOV   [__r0],A
    0A30: 65 15    ASL   [__r1]
    0A32: 6B 16    RLC   [__r0]
    0A34: 06 15 A0 ADD   [__r1],0xA0
    0A37: 0E 16 01 ADC   [__r0],0x1
    0A3A: 51 16    MOV   A,[__r0]
    0A3C: 10       PUSH  X
    0A3D: 58 15    MOV   X,[__r1]
    0A3F: 7C 0D 9E LCALL __lpmw
    0A42: 53 15    MOV   [__r1],A
    0A44: 51 12    MOV   A,[__rX]
    0A46: 53 16    MOV   [__r0],A
    0A48: 20       POP   X
    0A49: 52 FC    MOV   A,[X-4]
    0A4B: 12 15    SUB   A,[__r1]
    0A4D: 52 FB    MOV   A,[X-5]
    0A4F: 1A 16    SBB   A,[__r0]
    0A51: C0 03    JC    0x0A55
(0173) 			break;
    0A53: 80 30    JMP   0x0A84
(0174) 	}
    0A55: 77 01    INC   [X+1]
    0A57: 0F 00 00 ADC   [X+0],0x0
    0A5A: 62 D0 00 MOV   REG[0xD0],0x0
    0A5D: 51 18    MOV   A,[lRangeTable+1]
    0A5F: 11 02    SUB   A,0x2
    0A61: 62 D0 00 MOV   REG[0xD0],0x0
    0A64: 53 15    MOV   [__r1],A
    0A66: 62 D0 00 MOV   REG[0xD0],0x0
    0A69: 51 17    MOV   A,[lRangeTable]
    0A6B: 19 00    SBB   A,0x0
    0A6D: 62 D0 00 MOV   REG[0xD0],0x0
    0A70: 53 16    MOV   [__r0],A
    0A72: 52 01    MOV   A,[X+1]
    0A74: 12 15    SUB   A,[__r1]
    0A76: 51 16    MOV   A,[__r0]
    0A78: 31 80    XOR   A,0x80
    0A7A: 53 12    MOV   [__rX],A
    0A7C: 52 00    MOV   A,[X+0]
    0A7E: 31 80    XOR   A,0x80
    0A80: 1A 12    SBB   A,[__rX]
    0A82: CF 9E    JC    0x0A21
(0175) 	/* Interpolate between i and i+1 */
(0176) 	Distance=((i+4)*5)+(((int)wADC_Count-RangeTable[i])*5/(RangeTable[i+1]-RangeTable[i]));
    0A84: 62 D0 00 MOV   REG[0xD0],0x0
    0A87: 52 01    MOV   A,[X+1]
    0A89: 53 15    MOV   [__r1],A
    0A8B: 52 00    MOV   A,[X+0]
    0A8D: 53 16    MOV   [__r0],A
    0A8F: 65 15    ASL   [__r1]
    0A91: 6B 16    RLC   [__r0]
    0A93: 06 15 A0 ADD   [__r1],0xA0
    0A96: 0E 16 01 ADC   [__r0],0x1
    0A99: 51 16    MOV   A,[__r0]
    0A9B: 10       PUSH  X
    0A9C: 58 15    MOV   X,[__r1]
    0A9E: 7C 0D 9E LCALL __lpmw
    0AA1: 53 15    MOV   [__r1],A
    0AA3: 51 12    MOV   A,[__rX]
    0AA5: 53 16    MOV   [__r0],A
    0AA7: 20       POP   X
    0AA8: 52 01    MOV   A,[X+1]
    0AAA: 01 01    ADD   A,0x1
    0AAC: 53 13    MOV   [__r3],A
    0AAE: 52 00    MOV   A,[X+0]
    0AB0: 09 00    ADC   A,0x0
    0AB2: 53 14    MOV   [__r2],A
    0AB4: 65 13    ASL   [__r3]
    0AB6: 6B 14    RLC   [__r2]
    0AB8: 06 13 A0 ADD   [__r3],0xA0
    0ABB: 0E 14 01 ADC   [__r2],0x1
    0ABE: 51 14    MOV   A,[__r2]
    0AC0: 10       PUSH  X
    0AC1: 58 13    MOV   X,[__r3]
    0AC3: 7C 0D 9E LCALL __lpmw
    0AC6: 53 13    MOV   [__r3],A
    0AC8: 51 12    MOV   A,[__rX]
    0ACA: 53 14    MOV   [__r2],A
    0ACC: 20       POP   X
    0ACD: 51 15    MOV   A,[__r1]
    0ACF: 14 13    SUB   [__r3],A
    0AD1: 51 16    MOV   A,[__r0]
    0AD3: 1C 14    SBB   [__r2],A
    0AD5: 52 FC    MOV   A,[X-4]
    0AD7: 12 15    SUB   A,[__r1]
    0AD9: 53 15    MOV   [__r1],A
    0ADB: 52 FB    MOV   A,[X-5]
    0ADD: 1A 16    SBB   A,[__r0]
    0ADF: 08       PUSH  A
    0AE0: 51 15    MOV   A,[__r1]
    0AE2: 08       PUSH  A
    0AE3: 50 00    MOV   A,0x0
    0AE5: 08       PUSH  A
    0AE6: 50 05    MOV   A,0x5
    0AE8: 08       PUSH  A
    0AE9: 7C 0D 60 LCALL 0x0D60
    0AEC: 38 FC    ADD   SP,0xFC
    0AEE: 51 12    MOV   A,[__rX]
    0AF0: 53 15    MOV   [__r1],A
    0AF2: 51 11    MOV   A,[__rY]
    0AF4: 53 16    MOV   [__r0],A
    0AF6: 51 14    MOV   A,[__r2]
    0AF8: 08       PUSH  A
    0AF9: 51 13    MOV   A,[__r3]
    0AFB: 08       PUSH  A
    0AFC: 51 16    MOV   A,[__r0]
    0AFE: 08       PUSH  A
    0AFF: 51 15    MOV   A,[__r1]
    0B01: 08       PUSH  A
    0B02: 7C 0C 00 LCALL 0x0C00
    0B05: 18       POP   A
    0B06: 53 15    MOV   [__r1],A
    0B08: 18       POP   A
    0B09: 53 16    MOV   [__r0],A
    0B0B: 38 FE    ADD   SP,0xFE
    0B0D: 52 00    MOV   A,[X+0]
    0B0F: 08       PUSH  A
    0B10: 52 01    MOV   A,[X+1]
    0B12: 08       PUSH  A
    0B13: 50 00    MOV   A,0x0
    0B15: 08       PUSH  A
    0B16: 50 05    MOV   A,0x5
    0B18: 08       PUSH  A
    0B19: 7C 0D 60 LCALL 0x0D60
    0B1C: 38 FC    ADD   SP,0xFC
    0B1E: 51 12    MOV   A,[__rX]
    0B20: 53 13    MOV   [__r3],A
    0B22: 51 11    MOV   A,[__rY]
    0B24: 53 14    MOV   [__r2],A
    0B26: 06 13 14 ADD   [__r3],0x14
    0B29: 0E 14 00 ADC   [__r2],0x0
    0B2C: 51 13    MOV   A,[__r3]
    0B2E: 02 15    ADD   A,[__r1]
    0B30: 53 15    MOV   [__r1],A
    0B32: 51 14    MOV   A,[__r2]
    0B34: 0A 16    ADC   A,[__r0]
    0B36: 53 16    MOV   [__r0],A
    0B38: 50 00    MOV   A,0x0
    0B3A: 47 16 80 TST   [__r0],0x80
    0B3D: A0 03    JZ    0x0B41
    0B3F: 50 FF    MOV   A,0xFF
    0B41: 08       PUSH  A
    0B42: 08       PUSH  A
    0B43: 62 D0 00 MOV   REG[0xD0],0x0
    0B46: 51 16    MOV   A,[__r0]
    0B48: 08       PUSH  A
    0B49: 51 15    MOV   A,[__r1]
    0B4B: 08       PUSH  A
    0B4C: 7C 0C F5 LCALL 0x0CF5
    0B4F: 18       POP   A
    0B50: 54 05    MOV   [X+5],A
    0B52: 18       POP   A
    0B53: 54 04    MOV   [X+4],A
    0B55: 18       POP   A
    0B56: 54 03    MOV   [X+3],A
    0B58: 18       POP   A
    0B59: 54 02    MOV   [X+2],A
(0177) 	return((BYTE)Distance);
    0B5B: 52 02    MOV   A,[X+2]
    0B5D: 08       PUSH  A
    0B5E: 52 03    MOV   A,[X+3]
    0B60: 08       PUSH  A
    0B61: 52 04    MOV   A,[X+4]
    0B63: 08       PUSH  A
    0B64: 52 05    MOV   A,[X+5]
    0B66: 08       PUSH  A
    0B67: 7C 0C 4E LCALL 0x0C4E
    0B6A: 18       POP   A
    0B6B: 53 15    MOV   [__r1],A
    0B6D: 18       POP   A
    0B6E: 38 FE    ADD   SP,0xFE
    0B70: 51 15    MOV   A,[__r1]
    0B72: 38 FA    ADD   SP,0xFA
    0B74: 20       POP   X
    0B75: 7F       RET   
(0178) }
(0179) 
(0180) void Obstacle_Detection(BYTE y1,BYTE y2)
(0181) {
_Obstacle_Detection:
  y2                   --> X-5
  y1                   --> X-4
    0B76: 10       PUSH  X
    0B77: 4F       MOV   X,SP
(0182) 	if(y1==255 && y2==255)
    0B78: 3D FC FF CMP   [X-4],0xFF
    0B7B: B0 0D    JNZ   0x0B89
    0B7D: 3D FB FF CMP   [X-5],0xFF
    0B80: B0 08    JNZ   0x0B89
(0183) 	{
(0184) 		Motor_Control(FRONT);
    0B82: 50 01    MOV   A,0x1
    0B84: 08       PUSH  A
    0B85: 9D 21    CALL  _Motor_Control
    0B87: 38 FF    ADD   SP,0xFF
(0185) 	}
(0186) 			
(0187) 	if((y1>0 && y1 <= 60)  || (y2>0 && y2 <= 60))
    0B89: 50 00    MOV   A,0x0
    0B8B: 3B FC    CMP   A,[X-4]
    0B8D: D0 07    JNC   0x0B95
    0B8F: 50 3C    MOV   A,0x3C
    0B91: 3B FC    CMP   A,[X-4]
    0B93: D0 0D    JNC   0x0BA1
    0B95: 50 00    MOV   A,0x0
    0B97: 3B FB    CMP   A,[X-5]
    0B99: D0 47    JNC   0x0BE1
    0B9B: 50 3C    MOV   A,0x3C
    0B9D: 3B FB    CMP   A,[X-5]
    0B9F: C0 41    JC    0x0BE1
(0188) 	{
(0189) 		if(y1>y2)
    0BA1: 52 FB    MOV   A,[X-5]
    0BA3: 3B FC    CMP   A,[X-4]
    0BA5: D0 11    JNC   0x0BB7
(0190) 		{
(0191) 			Motor_Control(RIGHT);
    0BA7: 50 04    MOV   A,0x4
    0BA9: 08       PUSH  A
    0BAA: 9C FC    CALL  _Motor_Control
    0BAC: 38 FF    ADD   SP,0xFF
(0192) 			Delay10msTimes(80);
    0BAE: 10       PUSH  X
    0BAF: 50 50    MOV   A,0x50
    0BB1: 7C 08 3B LCALL __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes
    0BB4: 20       POP   X
(0193) 		}
    0BB5: 80 2B    JMP   0x0BE1
(0194) 		else if(y2 > y1)
    0BB7: 52 FC    MOV   A,[X-4]
    0BB9: 3B FB    CMP   A,[X-5]
    0BBB: D0 11    JNC   0x0BCD
(0195) 		{
(0196) 			Motor_Control(LEFT);
    0BBD: 50 03    MOV   A,0x3
    0BBF: 08       PUSH  A
    0BC0: 9C E6    CALL  _Motor_Control
    0BC2: 38 FF    ADD   SP,0xFF
(0197) 			Delay10msTimes(80);
    0BC4: 10       PUSH  X
    0BC5: 50 50    MOV   A,0x50
    0BC7: 7C 08 3B LCALL __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes
    0BCA: 20       POP   X
(0198) 		}
    0BCB: 80 15    JMP   0x0BE1
(0199) 		else if(y1==y2)
    0BCD: 52 FC    MOV   A,[X-4]
    0BCF: 3B FB    CMP   A,[X-5]
    0BD1: B0 0F    JNZ   0x0BE1
(0200) 		{
(0201) 
(0202) 			Motor_Control(LEFT);
    0BD3: 50 03    MOV   A,0x3
    0BD5: 08       PUSH  A
    0BD6: 9C D0    CALL  _Motor_Control
    0BD8: 38 FF    ADD   SP,0xFF
(0203) 			Delay10msTimes(100);
    0BDA: 10       PUSH  X
    0BDB: 50 64    MOV   A,0x64
    0BDD: 7C 08 3B LCALL __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes
    0BE0: 20       POP   X
(0204) 		}
(0205) 	}
(0206) 				
(0207) 	Motor_Control(FRONT);	
    0BE1: 50 01    MOV   A,0x1
    0BE3: 08       PUSH  A
    0BE4: 9C C2    CALL  _Motor_Control
    0BE6: 38 FF    ADD   SP,0xFF
(0208) 	Delay10msTimes(50);
    0BE8: 10       PUSH  X
    0BE9: 50 32    MOV   A,0x32
    0BEB: 7C 08 3B LCALL __UserModules_end|__text_start|_Delay10msTimes|Delay10msTimes
    0BEE: 20       POP   X
    0BEF: 20       POP   X
    0BF0: 7F       RET   
(0209) 			
(0210) }
(0211) 
(0212) void Turn_RangeSensor(int iAngle)
(0213) {
_Turn_RangeSensor:
  iAngle               --> X-5
    0BF1: 10       PUSH  X
    0BF2: 4F       MOV   X,SP
(0214) 	Servo_PWM_WritePulseWidth(iAngle);
    0BF3: 10       PUSH  X
(0215) }    0BF4: 52 FB    MOV   A,[X-5]
    0BF6: 08       PUSH  A
    0BF7: 52 FC    MOV   A,[X-4]
    0BF9: 20       POP   X
    0BFA: 7C 04 16 LCALL _Servo_PWM_WritePulseWidth
    0BFD: 20       POP   X
    0BFE: 20       POP   X
    0BFF: 7F       RET   
__lpmw:
    0D9E: 08       PUSH  A
    0D9F: 28       ROMX  
    0DA0: 53 12    MOV   [__rX],A
    0DA2: 18       POP   A
    0DA3: 75       INC   X
    0DA4: 09 00    ADC   A,0x0
    0DA6: 28       ROMX  
    0DA7: 7F       RET   
