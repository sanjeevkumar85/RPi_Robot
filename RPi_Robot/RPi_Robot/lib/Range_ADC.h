//*****************************************************************************
//*****************************************************************************
//  FILENAME: Range_ADC.h
//  Version: 1.20, Updated on 2013/5/19 at 10:39:54
//	Generated by PSoC Designer 5.4.2946
//
//  DESCRIPTION:  C declarations for the ADCINC User Module with
//                a 1st-order modulator.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef Range_ADC_INCLUDE
#define Range_ADC_INCLUDE

#include <m8c.h>

#pragma fastcall16 Range_ADC_Start
#pragma fastcall16 Range_ADC_SetPower
#pragma fastcall16 Range_ADC_Stop
#pragma fastcall16 Range_ADC_GetSamples
#pragma fastcall16 Range_ADC_StopADC
#pragma fastcall16 Range_ADC_fIsDataAvailable
#pragma fastcall16 Range_ADC_iClearFlagGetData
#pragma fastcall16 Range_ADC_wClearFlagGetData
#pragma fastcall16 Range_ADC_cClearFlagGetData
#pragma fastcall16 Range_ADC_bClearFlagGetData
#pragma fastcall16 Range_ADC_iGetData
#pragma fastcall16 Range_ADC_wGetData
#pragma fastcall16 Range_ADC_cGetData
#pragma fastcall16 Range_ADC_bGetData
#pragma fastcall16 Range_ADC_fClearFlag
#pragma fastcall16 Range_ADC_WritePulseWidth

//-------------------------------------------------
// Prototypes of the Range_ADC API.
//-------------------------------------------------
extern void  Range_ADC_Start(BYTE bPower);
extern void  Range_ADC_SetPower(BYTE bPower);
extern void  Range_ADC_Stop(void);
extern void  Range_ADC_GetSamples(BYTE bNumSamples);
extern void  Range_ADC_StopADC(void);
extern BYTE  Range_ADC_fIsDataAvailable(void);
extern INT   Range_ADC_iClearFlagGetData(void);
extern WORD  Range_ADC_wClearFlagGetData(void);
extern CHAR  Range_ADC_cClearFlagGetData(void);
extern BYTE  Range_ADC_bClearFlagGetData(void);
extern INT   Range_ADC_iGetData(void);
extern WORD  Range_ADC_wGetData(void);
extern CHAR  Range_ADC_cGetData(void);
extern BYTE  Range_ADC_bGetData(void);
extern BYTE  Range_ADC_fClearFlag(void);
extern void  Range_ADC_WritePulseWidth(BYTE bPulseWidthValue);


//-------------------------------------------------
// Defines for Range_ADC API's.
//-------------------------------------------------
#define Range_ADC_OFF         0
#define Range_ADC_LOWPOWER    1
#define Range_ADC_MEDPOWER    2
#define Range_ADC_HIGHPOWER   3


//-------------------------------------------------
// Hardware Register Definitions
//-------------------------------------------------
#pragma ioport  Range_ADC_PWMdr0:   0x040                 //Period reg
BYTE            Range_ADC_PWMdr0;
#pragma ioport  Range_ADC_PWMdr1:   0x041                 //1_ADDRh   ; Down count reg
BYTE            Range_ADC_PWMdr1;               
#pragma ioport  Range_ADC_PWMdr2:   0x042                 //Compare reg
BYTE            Range_ADC_PWMdr2;
#pragma ioport  Range_ADC_PWMcr0:   0x043                 //Control reg
BYTE            Range_ADC_PWMcr0;
#pragma ioport  Range_ADC_PWMfn:    0x140                  //Function reg
BYTE            Range_ADC_PWMfn;
#pragma ioport  Range_ADC_PWMsl:    0x141                  //Input select reg
BYTE            Range_ADC_PWMsl;
#pragma ioport  Range_ADC_PWMos:    0x142                  //Output select reg
BYTE            Range_ADC_PWMos;
#pragma ioport  Range_ADC_AtoDcr0:  0x084                //SC Block Control Reg 0
BYTE            Range_ADC_AtoDcr0;
#pragma ioport  Range_ADC_AtoDcr1:  0x085                //SC Block Control Reg 1
BYTE            Range_ADC_AtoDcr1;
#pragma ioport  Range_ADC_AtoDcr2:  0x086                //SC Block Control Reg 2
BYTE            Range_ADC_AtoDcr2;
#pragma ioport  Range_ADC_AtoDcr3:  0x087                //SC Block Control Reg 3
BYTE            Range_ADC_AtoDcr3;

#endif
// end of file Range_ADC.h
