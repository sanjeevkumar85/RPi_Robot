//*****************************************************************************
//*****************************************************************************
//  FILENAME: BackLeftMotor_P.h
//   Version: 2.60, Updated on 2013/5/19 at 10:44:7
//  Generated by PSoC Designer 5.4.2946
//
//  DESCRIPTION: PWM8 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef BackLeftMotor_P_INCLUDE
#define BackLeftMotor_P_INCLUDE

#include <m8c.h>

#pragma fastcall16 BackLeftMotor_P_EnableInt
#pragma fastcall16 BackLeftMotor_P_DisableInt
#pragma fastcall16 BackLeftMotor_P_Start
#pragma fastcall16 BackLeftMotor_P_Stop
#pragma fastcall16 BackLeftMotor_P_bReadCounter              // Read  DR0
#pragma fastcall16 BackLeftMotor_P_WritePeriod               // Write DR1
#pragma fastcall16 BackLeftMotor_P_bReadPulseWidth           // Read  DR2
#pragma fastcall16 BackLeftMotor_P_WritePulseWidth           // Write DR2

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 bBackLeftMotor_P_ReadCounter              // Read  DR0 (Deprecated)
#pragma fastcall16 bBackLeftMotor_P_ReadPulseWidth           // Read  DR2 (Deprecated)


//-------------------------------------------------
// Prototypes of the BackLeftMotor_P API.
//-------------------------------------------------

extern void BackLeftMotor_P_EnableInt(void);                        // Proxy Class 1
extern void BackLeftMotor_P_DisableInt(void);                       // Proxy Class 1
extern void BackLeftMotor_P_Start(void);                            // Proxy Class 1
extern void BackLeftMotor_P_Stop(void);                             // Proxy Class 1
extern BYTE BackLeftMotor_P_bReadCounter(void);                     // Proxy Class 2
extern void BackLeftMotor_P_WritePeriod(BYTE bPeriod);              // Proxy Class 1
extern BYTE BackLeftMotor_P_bReadPulseWidth(void);                  // Proxy Class 1
extern void BackLeftMotor_P_WritePulseWidth(BYTE bPulseWidth);      // Proxy Class 1

// The following functions are deprecated.
// They may be omitted in future releases
//
extern BYTE bBackLeftMotor_P_ReadCounter(void);            // Deprecated
extern BYTE bBackLeftMotor_P_ReadPulseWidth(void);         // Deprecated


//--------------------------------------------------
// Constants for BackLeftMotor_P API's.
//--------------------------------------------------

#define BackLeftMotor_P_CONTROL_REG_START_BIT  ( 0x01 )
#define BackLeftMotor_P_INT_REG_ADDR           ( 0x0e1 )
#define BackLeftMotor_P_INT_MASK               ( 0x01 )


//--------------------------------------------------
// Constants for BackLeftMotor_P user defined values
//--------------------------------------------------

#define BackLeftMotor_P_PERIOD                 ( 0x64 )
#define BackLeftMotor_P_PULSE_WIDTH            ( 0x32 )


//-------------------------------------------------
// Register Addresses for BackLeftMotor_P
//-------------------------------------------------

#pragma ioport  BackLeftMotor_P_COUNTER_REG:    0x020      //DR0 Count register
BYTE            BackLeftMotor_P_COUNTER_REG;
#pragma ioport  BackLeftMotor_P_PERIOD_REG: 0x021          //DR1 Period register
BYTE            BackLeftMotor_P_PERIOD_REG;
#pragma ioport  BackLeftMotor_P_COMPARE_REG:    0x022      //DR2 Compare register
BYTE            BackLeftMotor_P_COMPARE_REG;
#pragma ioport  BackLeftMotor_P_CONTROL_REG:    0x023      //Control register
BYTE            BackLeftMotor_P_CONTROL_REG;
#pragma ioport  BackLeftMotor_P_FUNC_REG:   0x120          //Function register
BYTE            BackLeftMotor_P_FUNC_REG;
#pragma ioport  BackLeftMotor_P_INPUT_REG:  0x121          //Input register
BYTE            BackLeftMotor_P_INPUT_REG;
#pragma ioport  BackLeftMotor_P_OUTPUT_REG: 0x122          //Output register
BYTE            BackLeftMotor_P_OUTPUT_REG;
#pragma ioport  BackLeftMotor_P_INT_REG:       0x0e1       //Interrupt Mask Register
BYTE            BackLeftMotor_P_INT_REG;


//-------------------------------------------------
// BackLeftMotor_P Macro 'Functions'
//-------------------------------------------------

#define BackLeftMotor_P_Start_M \
   BackLeftMotor_P_CONTROL_REG |=  BackLeftMotor_P_CONTROL_REG_START_BIT

#define BackLeftMotor_P_Stop_M  \
   BackLeftMotor_P_CONTROL_REG &= ~BackLeftMotor_P_CONTROL_REG_START_BIT

#define BackLeftMotor_P_EnableInt_M   \
   M8C_EnableIntMask(BackLeftMotor_P_INT_REG, BackLeftMotor_P_INT_MASK)

#define BackLeftMotor_P_DisableInt_M  \
   M8C_DisableIntMask(BackLeftMotor_P_INT_REG, BackLeftMotor_P_INT_MASK)

#endif
// end of file BackLeftMotor_P.h
