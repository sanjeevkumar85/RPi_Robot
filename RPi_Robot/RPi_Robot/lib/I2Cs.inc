;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: I2Cs.inc
;;  Version: 2.00, Updated on 2013/5/19 at 10:43:36
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: Assembler declarations for the EzI2Cs user module
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************


;--------------------------------------------------
; Constants for I2Cs_bBusy_Flag
;--------------------------------------------------
I2Cs_I2C_FREE :                        equ  0x00      ; No transaction at the current moment
I2Cs_I2C_BUSY_RAM_READ :               equ  0x01      ; RAM read transaction in progress
I2Cs_I2C_BUSY_RAM_WRITE:               equ  0x02      ; RAM write transaction in progress
I2Cs_I2C_BUSY_ROM_READ :               equ  0x04      ; ROM read transaction in progress
I2Cs_I2C_BUSY_ROM_WRITE:               equ  0x08      ; ROM write transaction in progress

;--------------------------------------------------
; Constants for I2Cs API's.
;--------------------------------------------------

I2Cs_DYNAMIC_ADDR:                     equ   0
I2Cs_ROM_ENABLE:                       equ   0
I2Cs_SYNC_FIX:                         equ   0
I2Cs_AUTO_ADDR_CHECK:                  equ   0                       ;CY8C28X45 may have this 0 or 1 while all other have 0
I2Cs_ADDR_REG_PRESENT:                 equ   0                       ;CY8C28X45 have 1 always while all other have 0
I2Cs_USED_I2C_BLOCK:                   equ   0                       ;CY8C28X45 have 0 for I2C Controller_0 and 1 for I2C Controller_1, other have 0
I2Cs_CY8C22x45:                        equ   0                       ;CY8C22x45 devices have 1 always while all other have 0

IF (I2Cs_ROM_ENABLE) 
   I2Cs_ADDR_MASK:                          equ  0x7E    ; Mask off ROM Addr and R/W bit
ELSE
   I2Cs_ADDR_MASK:                          equ  0xFE    ; Mask off  R/W bit
ENDIF

;; I2C_CFG Register definitions
I2Cs_CFG_PSelect:                           equ  0x40   ; Pin Select, 0 = P1,7/5, 1 = P1,1,0
I2Cs_CFG_BUS_ERROR_IE:                      equ  0x20   ; Enable Interrupt on bus error
I2Cs_CFG_STOP_IE:                           equ  0x10   ; Enable Interrupt on Stop condition
I2Cs_CFG_CLOCK_100K:                        equ  0x00   ; 100kHz Standard clock rate
I2Cs_CFG_CLOCK_400K:                        equ  0x04   ; 400kHz Fast Mode
I2Cs_CFG_CLOCK_50K:                         equ  0x08   ; 50kHz  Standard Mode
I2Cs_CFG_Master_EN:                         equ  0x02   ; Enable Master Mode.               
I2Cs_CFG_Slave_EN:                          equ  0x01   ; Enable Slave Mode.               

;; I2C_SCR Register definitions
I2Cs_SCR_BUS_ERROR:                         equ  0x80  ; Bus Error                    
I2Cs_SCR_LOST_ARB:                          equ  0x40  ; Lost Arbitration  (Master Only)
I2Cs_SCR_STOP_STATUS:                       equ  0x20  ; Stop Status                  
I2Cs_SCR_ACK:                               equ  0x10  ; ACK Status                   
I2Cs_SCR_NAK:                               equ  0x00  ; NAK Status                   
I2Cs_SCR_ADDRESS:                           equ  0x08  ; Data is address.
I2Cs_SCR_TRANSMIT:                          equ  0x04  ; Sets direction of data flow                
I2Cs_SCR_LRB:                               equ  0x02  ; Last Received Bit                
I2Cs_SCR_BYTE_COM:                          equ  0x01  ; Byte Complete   

;; I2C_DR  Register definitions (Data Register)

;; I2C_MSCR Register definitions  (Master Mode Only)
I2Cs_MSCR_BUS_BUSY:                         equ  0x08  ; Bus is Busy with other trafic        
I2Cs_MSCR_MASTER_MODE:                      equ  0x04  ; ?????
I2Cs_MSCR_RESTART_REN:                      equ  0x02  ; Generate a Restart
I2Cs_MSCR_START_REN:                        equ  0x01  ; Generate a Start


;; Valid address
I2Cs_SLAVE_ADDR:                            equ  (0x52<<1)        ; Permanent Slave Address
I2Cs_ALT_SLAVE_ADDR:                        equ  ((0x52<<1)&0x80) ; Permanent Slave Address

I2Cs_ALT_ADDR_BIT:                          equ  0x80 ; Alternate Address bit
I2Cs_RW_FLAG:                               equ  0x01 ; Read/Write flag      
I2Cs_RD_FLAG:                               equ  0x01 ; Read/Write flag      
I2Cs_WR_FLAG:                               equ  0x00 ; Read/Write flag      

I2Cs_CFG_REG:                               equ d6h    ; I2C Configuration Register
I2Cs_SCR_REG:                               equ d7h    ; I2C Enable Master/Slave Block Operation
I2Cs_DR_REG:                                equ d8h    ; I2C Status and Control Register
I2Cs_MSCR_REG:                              equ d9h    ; I2C Master Status and Control
IF(I2Cs_ADDR_REG_PRESENT) ;Applicable for CY8C28X45
I2Cs_ADDR_REG:               equ @ADDR_REG_ADDRh                 ; I2C Address
I2Cs_HW_ADDR_MASK:                          equ 80h              ; I2C HW Address Mask
ENDIF
IF (I2Cs_CY8C22x45)
I2Cs_ADDR_REG:                              equ ADh              ; I2C HW Slave Address register
I2Cs_HW_ADDR_EN:                            equ 80h              ; HwAddrEn bitfield
ENDIF


;; Bit definitions for I2Cs_bState
I2Cs_ACTIVITY_MASK:      equ  0xB0      ; Activity Mask
I2Cs_ANY_ACTIVITY:       equ  0x80      ; Any I2C bus activity.
I2Cs_READ_ACTIVITY:      equ  0x20      ; I2C read activity at primary address.
I2Cs_WRITE_ACTIVITY:     equ  0x10      ; I2C write activity at primary address.

;--------------------------------------------------
;   I2Cs API Constants
;--------------------------------------------------

I2Cs_INT_REG:                              equ 0x0de
I2Cs_INT_MASK:                             equ 0x01

; Definitions for I2Cs_EnableSlave function
I2Cs_CY8C27XXXA_ID:                         equ 0x0

;I2C_(status and control) reg write macro
;----------------------------------------------------
;  I2C_SCR and I2C_MSCR reg write macro
;
;  Use the following macros to write to the I2C_SCR register
;  Usage:    SetI2C_SCR  WRITE_VALUE
;
;  where WRITE_VALUE is the data to be writen
;
;----------------------------------------------------


; Write to the  I2Cs_SCR register
    macro SetI2Cs_SCR
IF (I2Cs_SYNC_FIX)
        or    F, FLAG_XIO_MASK            ; set bank1
        push  X
        mov   X, A                        ; if data for I2C_SCR was in A save it in X
        mov   A, reg[OSC_CR0]             ;
        push  A
        and   A, ~0x07                          ; Mask off CPU speed
        or    A, 0x01                           ; Set CPU to 6 MHz
        mov   reg[OSC_CR0], A                   ; 
        and   F, ~FLAG_XIO_MASK                 ; set bank0
        mov   A, X                              ; if the operation uses data in A get it out of X
        mov   reg[I2Cs_SCR_REG], @0 ; write data to reg[I2C_SCR]
        or    F, FLAG_XIO_MASK                  ; set bank1
        pop   A                                 ; restore original clock speed
        mov   reg[OSC_CR0], A
        and   F, ~FLAG_XIO_MASK                 ; set bank0
        mov   A, X                              ; if A was data restore it from X now
        pop   X                                 ; restore original accumulator
ELSE
        mov   reg[I2Cs_SCR_REG], @0 ; write data to reg[I2C_SCR]
ENDIF
    endm

; end of file I2Cs.inc


