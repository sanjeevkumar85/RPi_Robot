//*****************************************************************************
//*****************************************************************************
//  FILENAME: BackRightMotor_P.h
//   Version: 2.60, Updated on 2013/5/5 at 6:34:42
//  Generated by PSoC Designer 5.4.2927
//
//  DESCRIPTION: PWM8 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef BackRightMotor_P_INCLUDE
#define BackRightMotor_P_INCLUDE

#include <m8c.h>

#pragma fastcall16 BackRightMotor_P_EnableInt
#pragma fastcall16 BackRightMotor_P_DisableInt
#pragma fastcall16 BackRightMotor_P_Start
#pragma fastcall16 BackRightMotor_P_Stop
#pragma fastcall16 BackRightMotor_P_bReadCounter              // Read  DR0
#pragma fastcall16 BackRightMotor_P_WritePeriod               // Write DR1
#pragma fastcall16 BackRightMotor_P_bReadPulseWidth           // Read  DR2
#pragma fastcall16 BackRightMotor_P_WritePulseWidth           // Write DR2

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 bBackRightMotor_P_ReadCounter              // Read  DR0 (Deprecated)
#pragma fastcall16 bBackRightMotor_P_ReadPulseWidth           // Read  DR2 (Deprecated)


//-------------------------------------------------
// Prototypes of the BackRightMotor_P API.
//-------------------------------------------------

extern void BackRightMotor_P_EnableInt(void);                        // Proxy Class 1
extern void BackRightMotor_P_DisableInt(void);                       // Proxy Class 1
extern void BackRightMotor_P_Start(void);                            // Proxy Class 1
extern void BackRightMotor_P_Stop(void);                             // Proxy Class 1
extern BYTE BackRightMotor_P_bReadCounter(void);                     // Proxy Class 2
extern void BackRightMotor_P_WritePeriod(BYTE bPeriod);              // Proxy Class 1
extern BYTE BackRightMotor_P_bReadPulseWidth(void);                  // Proxy Class 1
extern void BackRightMotor_P_WritePulseWidth(BYTE bPulseWidth);      // Proxy Class 1

// The following functions are deprecated.
// They may be omitted in future releases
//
extern BYTE bBackRightMotor_P_ReadCounter(void);            // Deprecated
extern BYTE bBackRightMotor_P_ReadPulseWidth(void);         // Deprecated


//--------------------------------------------------
// Constants for BackRightMotor_P API's.
//--------------------------------------------------

#define BackRightMotor_P_CONTROL_REG_START_BIT ( 0x01 )
#define BackRightMotor_P_INT_REG_ADDR          ( 0x0e1 )
#define BackRightMotor_P_INT_MASK              ( 0x10 )


//--------------------------------------------------
// Constants for BackRightMotor_P user defined values
//--------------------------------------------------

#define BackRightMotor_P_PERIOD                ( 0x64 )
#define BackRightMotor_P_PULSE_WIDTH           ( 0x32 )


//-------------------------------------------------
// Register Addresses for BackRightMotor_P
//-------------------------------------------------

#pragma ioport  BackRightMotor_P_COUNTER_REG:   0x030      //DR0 Count register
BYTE            BackRightMotor_P_COUNTER_REG;
#pragma ioport  BackRightMotor_P_PERIOD_REG:    0x031      //DR1 Period register
BYTE            BackRightMotor_P_PERIOD_REG;
#pragma ioport  BackRightMotor_P_COMPARE_REG:   0x032      //DR2 Compare register
BYTE            BackRightMotor_P_COMPARE_REG;
#pragma ioport  BackRightMotor_P_CONTROL_REG:   0x033      //Control register
BYTE            BackRightMotor_P_CONTROL_REG;
#pragma ioport  BackRightMotor_P_FUNC_REG:  0x130          //Function register
BYTE            BackRightMotor_P_FUNC_REG;
#pragma ioport  BackRightMotor_P_INPUT_REG: 0x131          //Input register
BYTE            BackRightMotor_P_INPUT_REG;
#pragma ioport  BackRightMotor_P_OUTPUT_REG:    0x132      //Output register
BYTE            BackRightMotor_P_OUTPUT_REG;
#pragma ioport  BackRightMotor_P_INT_REG:       0x0e1      //Interrupt Mask Register
BYTE            BackRightMotor_P_INT_REG;


//-------------------------------------------------
// BackRightMotor_P Macro 'Functions'
//-------------------------------------------------

#define BackRightMotor_P_Start_M \
   BackRightMotor_P_CONTROL_REG |=  BackRightMotor_P_CONTROL_REG_START_BIT

#define BackRightMotor_P_Stop_M  \
   BackRightMotor_P_CONTROL_REG &= ~BackRightMotor_P_CONTROL_REG_START_BIT

#define BackRightMotor_P_EnableInt_M   \
   M8C_EnableIntMask(BackRightMotor_P_INT_REG, BackRightMotor_P_INT_MASK)

#define BackRightMotor_P_DisableInt_M  \
   M8C_DisableIntMask(BackRightMotor_P_INT_REG, BackRightMotor_P_INT_MASK)

#endif
// end of file BackRightMotor_P.h
