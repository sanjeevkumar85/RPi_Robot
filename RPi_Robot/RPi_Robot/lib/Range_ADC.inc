;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: Range_ADC.inc
;;  Version: 1.20, Updated on 2013/5/5 at 6:28:11
;;  Generated by PSoC Designer 5.4.2927
;;
;;  DESCRIPTION: Assembler declarations for the ADCINC A/D Converter
;;               User Module with a 1st-order modulator.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
;--------------------------------------------------
; Constants for Range_ADC API's.
;--------------------------------------------------

Range_ADC_OFF:                  equ 00h
Range_ADC_LOWPOWER:             equ 01h
Range_ADC_MEDPOWER:             equ 02h
Range_ADC_HIGHPOWER:            equ 03h

Range_ADC_bNUMBITS:             equ 0ch
Range_ADC_NoAZ:                 equ 1
Range_ADC_SIGNED_DATA:          equ 0
Range_ADC_9_OR_MORE_BITS:       equ ((0ch - 1)& 08h)
Range_ADC_8_OR_MORE_BITS:       equ ((0ch )& 08h)
;--------------------------------------------------
; Register Address Constants for Range_ADC
;--------------------------------------------------
Range_ADC_ISR_MASK:                    equ 01h
Range_ADC_ISR_REG:                     equ 0dfh
Range_ADC_CLR_REG:                     equ (((Range_ADC_ISR_REG & 038h)/8)^0dfh)

Range_ADC_PWMdr0:              equ 40h     ; Period reg
Range_ADC_PWMdr1:              equ 41h     ; Down count reg
Range_ADC_PWMdr2:              equ 42h     ; Compare reg
Range_ADC_PWMcr0:              equ 43h     ; Control reg
Range_ADC_PWMfn:               equ 40h     ; Function reg
Range_ADC_PWMsl:               equ 41h     ; Input  select reg
Range_ADC_PWMos:               equ 42h     ; Output select reg

Range_ADC_AtoDcr0:             equ 84h     ; SC Block Control Reg 0
Range_ADC_AtoDcr1:             equ 85h     ; SC Block Control Reg 1
Range_ADC_AtoDcr2:             equ 86h     ; SC Block Control Reg 2
Range_ADC_AtoDcr3:             equ 87h     ; SC Block Control Reg 3

HighByte: equ 0
LowByte:  equ 1

macro Range_ADC_fIsDataAvailable_M
   RAM_SETPAGE_CUR >Range_ADC_fStatus
   mov A,[Range_ADC_fStatus]
endm


macro Range_ADC_iGetData_M
   RAM_SETPAGE_CUR >Range_ADC_iResult
   mov X,[(Range_ADC_iResult + HighByte)]
   mov A,[(Range_ADC_iResult + LowByte)]
endm


macro Range_ADC_wGetData_M
   Range_ADC_iGetData_M
endm


macro Range_ADC_cGetData_M
   RAM_SETPAGE_CUR >Range_ADC_iResult
   mov A,[(Range_ADC_iResult + LowByte)]
endm


macro Range_ADC_bGetData_M
   Range_ADC_cGetData_M
endm


macro Range_ADC_fClearFlag_M
   RAM_SETPAGE_CUR >Range_ADC_fStatus
   mov A,[Range_ADC_fStatus]
   mov [Range_ADC_fStatus],00h
endm


macro Range_ADC_iClearFlagGetData_M
   RAM_SETPAGE_CUR >Range_ADC_fStatus
  .repeat:
      mov [Range_ADC_fStatus],00h
      mov X,[(Range_ADC_iResult + HighByte)]
      mov A,[(Range_ADC_iResult + LowByte)]
      cmp [Range_ADC_fStatus],00h
  .until: jnz .repeat
endm


macro Range_ADC_wClearFlagGetData_M
   Range_ADC_iClearFlagGetData_M
endm


macro Range_ADC_cClearFlagGetData_M
   RAM_SETPAGE_CUR >Range_ADC_fStatus
   mov [Range_ADC_fStatus],00h
   mov A,[(Range_ADC_iResult + LowByte)]
endm


macro Range_ADC_bClearFlagGetData_M
   Range_ADC_cClearFlagGetData_M
endm

macro Range_ADC_ENABLE_INTEGRATOR_M  
   and reg[Range_ADC_AtoDcr3],~10h
   IF Range_ADC_NoAZ
   and reg[Range_ADC_AtoDcr2],~20h
   ENDIF
endm


macro Range_ADC_RESET_INTEGRATOR_M  
   IF Range_ADC_NoAZ
   or  reg[Range_ADC_AtoDcr2],20h
   ENDIF
   or  reg[Range_ADC_AtoDcr3],10h
endm


macro Range_ADC_STARTADC_M  
   ;Enable PWM interrupt
   mov reg[Range_ADC_CLR_REG],~(Range_ADC_ISR_MASK)
   or  reg[Range_ADC_ISR_REG], (Range_ADC_ISR_MASK)
endm


macro Range_ADC_STOPADC_M
   ;Disable PWM interrupt  
   and reg[Range_ADC_ISR_REG],~(Range_ADC_ISR_MASK)
endm


macro Range_ADC_WritePulseWidth_M
   mov reg[Range_ADC_PWMdr2],A
endm

; end of file Range_ADC.inc
